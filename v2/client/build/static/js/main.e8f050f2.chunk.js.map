{"version":3,"sources":["utils/routeUtils.js","routes.js","utils/styleUtils.js","components/homepage/header.js","components/homepage/valueProp/valuePropSection.js","components/homepage/valueProp.js","graphql/venueQueries.js","graphql/userQueries.js","utils/userUtils.js","constants.js","components/homepage/signup.js","components/homePage.js","graphql/cityQueries.js","components/dashboard/cityFormField.js","components/dashboard/venueTypeFormField.js","graphql/venueMutations.js","components/dashboard/addVenueDialog.js","utils/validationUtils.js","components/dashboard/venueTypeTabs.js","utils/venueUtils.js","components/dashboard/venueListItem.js","components/dashboard/venueList.js","graphql/userMutations.js","components/dashboard/feedItem.js","utils/dateUtils.js","components/dashboard/venueTypeMultiFormField.js","components/dashboard/feedConfigurator.js","components/dashboard/feed.js","components/shared/withPageTemplate.js","components/dashboardPage.js","components/venue/header.js","components/venue/similarVenues.js","components/venue/locationInfo.js","utils/urlUtils.js","components/venue/favoriteButton.js","components/venuePage.js","theme.js","components/shared/loginDialog.js","components/shared/loginButton.js","layout/appBar.js","layout/appBarContainer.js","components/userProfile/sideVenueWidget.js","components/userProfilePage.js","App.js","serviceWorker.js","index.js"],"names":["isHomepage","location","pathname","Routes","home","dashboard","dashboardPath","section","venue","venuePath","venueSlug","userProfile","userProfilePath","userId","btoa","encodeUserId","validatePageSection","options","fallback","Object","values","includes","headerStyles","imageUrl","height","container","display","justifyContent","alignItems","background","backgroundSize","headerText","color","headerStyle","style","Typography","variant","props","title","icon","text","iconStyle","width","className","discoverContent","trackContent","shareContent","VenueDetails","gql","VenueStats","GET_VENUE_BY_SLUG","GET_VENUES_FOR_CURRENT_USER","GET_VENUE_TYPES","GET_SIMILAR_VENUES_IN_RADIUS","GET_FEED_VENUES","CURRENT_USER_QUERY","CURRENT_USER_FEED_CONFIG_QUERY","GET_USER_PROFILE_BY_PUBLIC_ID","isUserLoggedIn","localStorage","getItem","onClick","event","Event","window","dispatchEvent","openSignUpDialog","GET_CITIES","position","formControl","minWidth","marginTop","marginBottom","CityFormField","onCitySelected","isMulti","fieldLabel","placeholder","containerWidth","containerDisplay","initialValue","client","useApolloClient","useState","query","setQuery","selectedOption","setSelectedOption","setOptions","useEffect","length","variables","limit","getSuggestions","then","data","cities","map","city","value","id","label","name","state","Array","isArray","FormControl","InputLabel","shrink","htmlFor","defaultValue","onChange","option","onInputChange","isClearable","menuIsOpen","escapeClearsValue","onVenueTypeSelected","useQuery","loading","error","message","Select","handleOptionChange","target","inputProps","venueTypes","venueType","MenuItem","key","CREATE_VENUE_MUTATION","CREATE_USER_VENUE_FAVORITE_MUTATION","DELETE_USER_VENUE_FAVORITE_MUTATION","appBar","margin","body","input","venueStub","type","streetAddress","zipcode","lat","lng","open","toggleDialog","onCreatedVenue","useMutation","onError","console","log","onCompleted","refetchQueries","awaitRefetchQueries","addVenue","newVenue","setNewVenue","userActionText","setUserActionText","handleChange","Dialog","onClose","fullScreen","aria-labelledby","AppBar","Toolbar","IconButton","edge","aria-label","DialogTitle","DialogContent","DialogContentText","TextField","venueTypeId","autoComplete","customInput","format","Button","valid","isNaN","parseInt","indexOf","validateVenue","typeId","cityId","response","withStyles","boxShadow","float","tabIndicator","backgroundColor","classes","venues","venueTypeFilter","onSetVenueTypeFilter","Fragment","Tabs","e","indicator","orientation","scrollButtons","Tab","results","x","push","keys","getVenueTypes","sort","index","venueMapLink","address","encodeURIComponent","venueCityState","venueAddress","separator","border","borderRadius","padding","marginRight","fontSize","fontWeight","lineHeight","textDecoration","marginLeft","textTransform","textAlign","top","showDeleteFavoriteButton","onDeleteFavoriteCallback","update","store","deleteUserVenueFavorite","updateFavoriteStats","deleteFavorite","venueStats","readQuery","slug","venueBySlug","writeQuery","venueId","to","cssClass","venueIconComponent","Restaurant","Museum","Pets","DirectionsWalk","Nature","NaturePeople","DirectionsRun","NearMe","venueIcon","href","rel","currentDashboardSection","isFavoritesDashboardSection","externalTriggerVenueRefresh","setVenueTypeFilter","setVenues","triggerVenueRefresh","setTriggerVenueRefresh","me","favoriteVenues","onDeleteFavorite","filter","SIGNUP_MUTATION","LOGIN_MUTATION","UPDATE_CURRENT_USER_FEED_CONFIG_MUTATION","borderBottom","creator","timestamp","Date","diffSeconds","getTime","Math","round","toLocaleDateString","year","month","day","sinceCreated","createdAt","user","firstName","lastName","VenueTypeMultiFormField","defaultVenueTypeIds","split","isSearchable","FeedConfigurator","feedConfiguration","onFeedConfigurationUpdated","cityIds","setCityIds","venueTypeIds","setVenueTypeIds","ids","join","cityDetails","maxWidth","feedVenues","setFeedVenues","first","init","setFeedConfiguration","updateCurrentUserFeedConfigMutation","userFeedConfig","newFeedConfiguration","withPageTemplate","WrappedComponent","React","Component","render","this","DASHBOARD_SECTION","FEED","FOLLOWED_DESTINATIONS","MY_DESTINATIONS","FAVORITES","flexGrow","cursor","letterSpacing","match","params","dialogOpen","setDialogOpen","setExternalTriggerVenueRefresh","renderDashboardSection","dashboardSection","Add","image","venueHeaderImage","SimilarVenues","similarVenues","setSimilarVenues","radius","LocationInfo","favoriteByCurrentUser","onUpdateFavoritesStats","createUserVenueFavorite","addFavorite","preventDefault","pageStyle","sectionHeader","columnWrapper","mainColumn","sideColumm","VenuePage","setVenue","venueTypeName","setVenueTypeName","venuePrimaryTypeName","favorites","thousandSeparator","displayType","pluralize","description","createMuiTheme","palette","primary","main","blue","default","typography","useNextVariants","LoginDialog","login","undefined","email","password","errorMessage","_update","cache","info","a","currentUser","token","_confirm","signup","_saveUserData","document","setItem","JSON","stringify","setUserInfo","_error","graphQLErrors","setState","extensions","exception","errors","componentDidUpdate","prevProps","fullWidth","dialogMainError","dialogMainContent","DialogActions","mutation","withRouter","flexDirection","withCurrentUser","setLogin","callback","addEventListener","renderUserInfo","compose","graphql","ButtonAppBar","anchorEl","toggleMenu","currentTarget","root","logoText","grow","loginButton","menuWrapper","menuButton","Boolean","component","RouterLink","removeItem","history","styles","nonHomepageStyles","borderBottomColor","blueGrey","currentStyles","AppBarWithStyles","SideVenueWidget","publicId","setUserProfile","config","headerImageUrl","stats","created","favorited","recentAddedVenues","recentFavoriteVenues","App","theme","CssBaseline","appBarSpacer","exact","path","HomePage","DashboardPage","UserProfilePage","fontFamily","hostname","httpLink","HttpLink","uri","process","credentials","headers","authorization","ApolloClient","link","ApolloLink","from","networkError","locations","InMemoryCache","resolvers","userInfo","parse","__typename","getUserInfoFromStorage","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e8f050f2.chunk.js","sourcesContent":["import Routes from '../routes'\n\nexport const isHomepage = location => location.pathname === Routes.home\n\nexport const encodeUserId = userId => btoa(userId * 999999999)\n\nexport const decodeUserId = encodedUserId => atob(encodedUserId) / 999999999\n","import { encodeUserId } from './utils/routeUtils'\n\nexport default {\n  home: '/',\n  dashboard: '/dashboard/:section?',\n  dashboardPath: section => `/dashboard/${section}`,\n  venue: '/venue/:venueSlug',\n  venuePath: venueSlug => `/venue/${venueSlug}`,\n  userProfile: '/user/:userId',\n  userProfilePath: userId => `/user/${encodeUserId(userId)}`,\n  validatePageSection: (section, options, fallback) =>\n    Object.values(options).includes(section) ? section : fallback\n}\n","export const headerStyles = (imageUrl, height) => {\n  return {\n    container: {\n      display: 'flex',\n      // flexWrap: 'wrap',\n      // flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      background: `linear-gradient(rgba(0, 0, 0, 0.5),rgba(0, 0, 0, 0.5)),url(${imageUrl}) 50% 50% no-repeat`,\n      backgroundSize: 'cover',\n      height: height\n    },\n    headerText: {\n      color: '#ffffff'\n    }\n  }\n}\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport { headerStyles } from '../../utils/styleUtils'\n\nconst headerStyle = headerStyles('/images/family-biking-cmp.jpg', '700px')\n\nexport default () => {\n  return (\n    <div style={headerStyle.container}>\n      <Typography variant=\"h2\" style={headerStyle.headerText}>\n        <strong>Experience</strong> childhood, again.\n      </Typography>\n    </div>\n  )\n}\n","import React from \"react\";\n\nimport \"./valuePropSection.css\";\n\nexport default props => {\n  const { title, icon, text } = props;\n  const iconStyle = {\n    background: `url(/images/icons/${icon}.png) 0% 0% / 60px 60px no-repeat`,\n    width: \"60px\",\n    height: \"60px\"\n  };\n\n  return (\n    <div className=\"value-prop-section\">\n      <div className=\"value-prop-title\">{title}</div>\n      <div className=\"value-prop-icon\" style={iconStyle}></div>\n      <div className=\"value-prop-text\">{text}</div>\n    </div>\n  );\n};\n","import React from 'react'\n\nimport ValuePropSection from './valueProp/valuePropSection'\nimport './valueProp.css'\n\nconst discoverContent = {\n  title: 'Discover',\n  icon: 'discover',\n  text: `Find out about great local places to visit with your family. From restaurants, to museums, \n\tparks and playgrounds, make the most of your time!`\n}\n\nconst trackContent = {\n  title: 'Track',\n  icon: 'track',\n  text: `Had a great time sharing a meal with your family or enjoyed a hiking trail? Jot it down to build your \n\troster of go-to places for your future trips.`\n}\n\nconst shareContent = {\n  title: 'Share',\n  icon: 'share',\n  text: `Share your favorite places to visit with friends and family; hear about what others are \n\tenjoying, for great new ideas.`\n}\n\nexport default () => {\n  return (\n    <div className=\"value-prop-container\">\n      <ValuePropSection {...discoverContent} />\n      <ValuePropSection {...trackContent} />\n      <ValuePropSection {...shareContent} />\n    </div>\n  )\n}\n","import { gql } from '@apollo/client'\n\nexport const VenueDetails = gql`\n  fragment VenueDetails on Venue {\n    id\n    name\n    slug\n    description\n    streetAddress\n    zipcode\n    city\n    state\n    lat\n    lng\n    venueTypes {\n      id\n      name\n      image\n    }\n  }\n`\n\nconst VenueStats = gql`\n  fragment VenueStats on Venue {\n    venueStats {\n      favorites\n      favoriteByCurrentUser\n    }\n  }\n`\n\nexport const GET_VENUE_BASICS = gql`\n  query($venueId: ID!) {\n    venue(id: $venueId) {\n      ...VenueDetails\n    }\n  }\n  ${VenueDetails}\n`\n\nexport const GET_VENUE_ADVANCED = gql`\n  query($venueId: ID!) {\n    venue(id: $venueId) {\n      ...VenueDetails\n      ...VenueStats\n    }\n  }\n  ${VenueDetails}\n  ${VenueStats}\n`\n\nexport const GET_VENUE_BY_SLUG = gql`\n  query($venueSlug: String!) {\n    venueBySlug(slug: $venueSlug) {\n      ...VenueDetails\n      ...VenueStats\n    }\n  }\n  ${VenueDetails}\n  ${VenueStats}\n`\n\nexport const GET_VENUES_FOR_CURRENT_USER = gql`\n  query {\n    me {\n      venues {\n        ...VenueDetails\n      }\n      favoriteVenues {\n        ...VenueDetails\n      }\n    }\n  }\n  ${VenueDetails}\n`\n\nexport const GET_VENUE_TYPES = gql`\n  query {\n    venueTypes {\n      id\n      name\n      image\n    }\n  }\n`\n\nexport const GET_SIMILAR_VENUES_IN_RADIUS = gql`\n  query($venueId: ID!, $limit: Int, $radius: Int) {\n    similarVenues(id: $venueId, first: $limit, radius: $radius) {\n      id\n      name\n      slug\n      streetAddress\n      zipcode\n      city\n    }\n  }\n`\n\nexport const GET_FEED_VENUES = gql`\n  query($cityIds: String, $venueTypeIds: String, $sort: String, $first: Int) {\n    venues(\n      cityIds: $cityIds\n      venueTypeIds: $venueTypeIds\n      sort: $sort\n      first: $first\n    ) {\n      id\n      createdAt\n      name\n      slug\n      description\n      streetAddress\n      zipcode\n      city\n      state\n      lat\n      lng\n      creator {\n        id\n        firstName\n        lastName\n      }\n      venueTypes {\n        id\n        name\n        image\n      }\n    }\n  }\n`\n","import { gql } from '@apollo/client'\nimport { VenueDetails } from './venueQueries'\n\nexport const CURRENT_USER_QUERY = gql`\n  query {\n    currentUser @client {\n      id\n      firstName\n      lastName\n    }\n  }\n`\n\nexport const CURRENT_USER_FEED_CONFIG_QUERY = gql`\n  query {\n    userFeedConfig {\n      cityIds\n      venueTypeIds\n      cityDetails {\n        id\n        name\n        state\n      }\n    }\n  }\n`\n\nexport const GET_USER_PROFILE_BY_PUBLIC_ID = gql`\n  query($publicId: String!) {\n    userProfile(publicId: $publicId) {\n      user {\n        id\n        firstName\n        lastName\n        zipcode\n      }\n      config {\n        headerImageUrl\n      }\n      stats {\n        created\n        favorited\n      }\n      recentFavoriteVenues {\n        ...VenueDetails\n      }\n      recentAddedVenues {\n        ...VenueDetails\n      }\n    }\n  }\n  ${VenueDetails}\n`\n","import { AUTH_TOKEN, USER_INFO } from '../constants'\nimport { graphql } from '@apollo/client/react/hoc'\nimport { compose } from 'recompose'\nimport { CURRENT_USER_QUERY } from '../graphql/userQueries'\n\nexport const isUserLoggedIn = () => !!localStorage.getItem(AUTH_TOKEN)\n\nexport const logoutUser = () => {\n  localStorage.removeItem(AUTH_TOKEN)\n  localStorage.removeItem(USER_INFO)\n}\n\nexport const setUserInfo = (token, user) => {\n  localStorage.setItem(AUTH_TOKEN, token)\n  localStorage.setItem(USER_INFO, JSON.stringify(user))\n}\n\nexport const getUserInfoFromStorage = () => {\n  const userInfo = localStorage.getItem(USER_INFO)\n\n  if (userInfo) {\n    return JSON.parse(userInfo)\n  } else {\n    return {\n      __typename: 'User',\n      id: null,\n      firstName: null,\n      lastName: null,\n      email: null\n    }\n  }\n}\n\nexport const withCurrentUser = WrappedComponent => {\n  return compose(\n    graphql(CURRENT_USER_QUERY, {\n      props: ({ data: { currentUser } }) => ({\n        currentUser\n      })\n    })\n  )(WrappedComponent)\n}\n\nexport const listenForOpenSignUpDialog = callback => {\n  window.addEventListener('openSignUpModal', () => callback())\n}\nexport const openSignUpDialog = () => {\n  const event = new Event('openSignUpModal')\n  window.dispatchEvent(event)\n}\n\nexport const shortName = user => {\n  if (user && user.firstName && user.lastName) {\n    return `${user.firstName} ${user.lastName[0]}.`\n  }\n\n  return ''\n}\n","export const AUTH_TOKEN = 'auth-token'\nexport const USER_INFO = 'user-info'","import React from 'react'\nimport { isUserLoggedIn, openSignUpDialog } from '../../utils/userUtils'\n\nimport '../shared/button.css'\nimport './signup.css'\n\nexport default () => {\n  const renderSignUp = () => {\n    return (\n      <div>\n        <button\n          className=\"form-button homepage-signup-button\"\n          onClick={() => openSignUpDialog()}\n        >\n          Get Started\n        </button>\n      </div>\n    )\n  }\n\n  return <div>{!isUserLoggedIn() && renderSignUp()}</div>\n}\n","import React from 'react'\nimport Header from './homepage/header'\nimport ValueProp from './homepage/valueProp'\nimport SignUpSection from './homepage/signup'\n\nexport default () => {\n  return (\n    <div>\n      <Header />\n      <ValueProp />\n      <SignUpSection />\n    </div>\n  )\n}\n","import { gql } from '@apollo/client'\n\nexport const GET_CITIES = gql`\n  query($limit: Int, $query: String) {\n    cities(first: $limit, query: $query) {\n      id\n      name\n      state\n    }\n  }\n`\n","import React, { useState, useEffect } from 'react'\nimport Select from 'react-select'\nimport { GET_CITIES } from '../../graphql/cityQueries'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport { useApolloClient } from '@apollo/client'\n\nconst style = {\n  container: {\n    position: 'relative',\n    width: '500px'\n  },\n  formControl: {\n    minWidth: '500px',\n    marginTop: '16px',\n    marginBottom: '8px',\n    height: '16px'\n  }\n}\n\nconst CityFormField = ({\n  onCitySelected,\n  isMulti,\n  fieldLabel,\n  placeholder,\n  containerWidth,\n  containerDisplay,\n  initialValue\n}) => {\n  const client = useApolloClient()\n  const [query, setQuery] = useState('')\n  const [selectedOption, setSelectedOption] = useState(isMulti ? [] : {})\n  const [options, setOptions] = useState([])\n\n  useEffect(() => {\n    const getSuggestions = query => {\n      return client.query({\n        query: GET_CITIES,\n        variables: { limit: 10, query }\n      })\n    }\n\n    if (query && query.length >= 3) {\n      getSuggestions(query).then(({ data }) => {\n        setOptions(\n          data.cities.map(city => {\n            return { value: city.id, label: `${city.name}, ${city.state}` }\n          })\n        )\n      })\n    } else {\n      setOptions([])\n    }\n  }, [query, client])\n\n  useEffect(() => {\n    if (initialValue && Array.isArray(initialValue) && initialValue.length) {\n      setSelectedOption(\n        initialValue.map(city => {\n          return { value: city.id, label: `${city.name}, ${city.state}` }\n        })\n      )\n    }\n  }, [initialValue])\n\n  const handleInputChange = text => {\n    setQuery(text)\n  }\n\n  const handleOptionChange = option => {\n    setSelectedOption(option)\n    onCitySelected(option)\n  }\n\n  const hasOptions = () => options && options.length\n\n  return (\n    <div\n      style={{\n        ...style.container,\n        width: containerWidth ? containerWidth : '500px',\n        display: containerDisplay ? containerDisplay : 'block'\n      }}\n    >\n      <FormControl style={style.formControl}>\n        <InputLabel shrink={true} htmlFor=\"age-simple\">\n          {fieldLabel ? fieldLabel : 'City'}\n        </InputLabel>\n      </FormControl>\n      <Select\n        value={selectedOption}\n        defaultValue={null}\n        onChange={handleOptionChange}\n        options={options}\n        onInputChange={handleInputChange}\n        placeholder={placeholder ? placeholder : 'Type in name of city'}\n        isClearable={true}\n        isMulti={!!isMulti}\n        menuIsOpen={hasOptions()}\n        escapeClearsValue={true}\n      />\n    </div>\n  )\n}\n\nexport default CityFormField\n","import React, { useState } from 'react'\nimport { useQuery } from '@apollo/client'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\n\nimport { GET_VENUE_TYPES } from '../../graphql/venueQueries'\n\nconst style = {\n  formControl: {\n    minWidth: '500px',\n    marginTop: '16px',\n    marginBottom: '8px'\n  }\n}\n\nexport default ({ onVenueTypeSelected }) => {\n  const [selectedOption, setSelectedOption] = useState('')\n  const { loading, error, data } = useQuery(GET_VENUE_TYPES)\n\n  const handleOptionChange = option => {\n    setSelectedOption(option)\n    onVenueTypeSelected(option)\n  }\n\n  if (loading) return 'Loading...'\n  if (error) return `Error! ${error.message}`\n\n  return (\n    <FormControl style={style.formControl}>\n      <InputLabel htmlFor=\"age-simple\">Venue Type</InputLabel>\n      <Select\n        value={selectedOption}\n        onChange={event => handleOptionChange(event.target.value)}\n        inputProps={{\n          name: 'type',\n          id: 'venue-type'\n        }}\n      >\n        {data.venueTypes.map(venueType => (\n          <MenuItem key={venueType.id} value={venueType.id}>\n            {venueType.name}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  )\n}\n","import { gql } from '@apollo/client'\n\nexport const CREATE_VENUE_MUTATION = gql`\n  mutation CreateVenueMutation(\n    $name: String!\n    $streetAddress: String!\n    $zipcode: Int!\n    $cityId: Int!\n    $typeId: Int!\n  ) {\n    createVenue(\n      name: $name\n      streetAddress: $streetAddress\n      zipcode: $zipcode\n      city: { id: $cityId }\n      venueType: { id: $typeId }\n    ) {\n      id\n      name\n      streetAddress\n      venueTypes {\n        name\n      }\n    }\n  }\n`\n\nexport const CREATE_USER_VENUE_FAVORITE_MUTATION = gql`\n  mutation CreateUserVenueFavorite($venueId: Int!) {\n    createUserVenueFavorite(venueId: $venueId) {\n      favorites\n      favoriteByCurrentUser\n    }\n  }\n`\n\nexport const DELETE_USER_VENUE_FAVORITE_MUTATION = gql`\n  mutation DeleteUserVenueFavorite($venueId: Int!) {\n    deleteUserVenueFavorite(venueId: $venueId) {\n      favorites\n      favoriteByCurrentUser\n    }\n  }\n`\n","import React, { useState } from 'react'\n\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport TextField from '@material-ui/core/TextField'\nimport NumberFormat from 'react-number-format'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport CloseIcon from '@material-ui/icons/Close'\nimport IconButton from '@material-ui/core/IconButton'\n\nimport CityFormField from './cityFormField'\nimport VenueTypeFormField from './venueTypeFormField'\nimport { CREATE_VENUE_MUTATION } from '../../graphql/venueMutations'\nimport Button from '@material-ui/core/Button'\n\nimport { validateVenue } from '../../utils/validationUtils'\n\nimport { useMutation } from '@apollo/client'\nimport { GET_VENUES_FOR_CURRENT_USER } from '../../graphql/venueQueries'\n\nconst USER_ACTION_TEXT = 'Please enter information about a venue'\nconst USER_ACTION_TEXT_ERROR = 'Please enter valid venue information'\n\nconst style = {\n  appBar: {\n    position: 'relative'\n  },\n  title: {\n    margin: '0 auto'\n  },\n  body: {\n    margin: '0 auto'\n  },\n  input: {\n    minWidth: '500px'\n  }\n}\n\nconst venueStub = {\n  name: '',\n  type: {\n    id: null\n  },\n  streetAddress: '',\n  zipcode: '',\n  lat: '',\n  lng: '',\n  city: {}\n}\n\nexport default ({ open, toggleDialog, onCreatedVenue }) => {\n  const [addVenue] = useMutation(CREATE_VENUE_MUTATION, {\n    onError(error) {\n      console.log('error', error)\n    },\n    onCompleted(data) {\n      onCreatedVenue()\n    },\n    refetchQueries: [\n      {\n        query: GET_VENUES_FOR_CURRENT_USER\n      }\n    ],\n    awaitRefetchQueries: true\n  })\n\n  const [newVenue, setNewVenue] = useState({ ...venueStub })\n  const [userActionText, setUserActionText] = useState(USER_ACTION_TEXT)\n\n  const onCitySelected = city => {\n    if (city && city.value) {\n      setNewVenue({ ...newVenue, city: { id: city.value } })\n    } else {\n      setNewVenue({ ...newVenue, city: {} })\n    }\n  }\n\n  const onVenueTypeSelected = venueTypeId => {\n    setNewVenue({ ...newVenue, type: { id: venueTypeId } })\n  }\n\n  const handleChange = name => event => {\n    setNewVenue({ ...newVenue, [name]: event.target.value })\n  }\n\n  const onSubmit = () => {\n    if (validateVenue(newVenue)) {\n      addVenue({\n        variables: {\n          name: newVenue.name,\n          typeId: newVenue.type.id,\n          streetAddress: newVenue.streetAddress,\n          zipcode: parseInt(newVenue.zipcode),\n          cityId: newVenue.city.id\n        }\n      }).then(response => {\n        setNewVenue({ ...venueStub })\n        toggleDialog()\n      })\n    } else {\n      setUserActionText(USER_ACTION_TEXT_ERROR)\n    }\n  }\n\n  return (\n    <Dialog\n      open={open}\n      onClose={toggleDialog}\n      fullScreen={true}\n      aria-labelledby=\"form-dialog-title\"\n    >\n      <AppBar style={style.appBar}>\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            onClick={toggleDialog}\n            aria-label=\"close\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <DialogTitle style={style.title}>Add New Destination</DialogTitle>\n      <DialogContent style={style.body}>\n        <DialogContentText>{userActionText}</DialogContentText>\n        <TextField\n          id=\"venue-name\"\n          label=\"Venue name\"\n          value={newVenue.name}\n          onChange={handleChange('name')}\n          margin=\"normal\"\n          style={style.input}\n        />\n        <br />\n        <VenueTypeFormField onVenueTypeSelected={onVenueTypeSelected} />\n        <br />\n        <TextField\n          id=\"venue-street-address\"\n          name=\"street-address\"\n          label=\"Street address\"\n          value={newVenue.streetAddress}\n          onChange={handleChange('streetAddress')}\n          margin=\"normal\"\n          autoComplete=\"shipping street-address\"\n          style={style.input}\n        />\n        <CityFormField onCitySelected={onCitySelected} />\n\n        <NumberFormat\n          customInput={TextField}\n          id=\"venue-zipcode\"\n          name=\"zipcode\"\n          label=\"Zipcode\"\n          value={newVenue.zipcode}\n          onChange={handleChange('zipcode')}\n          margin=\"normal\"\n          style={style.input}\n          autoComplete=\"postal-code\"\n          format=\"#####\"\n        />\n        <div>\n          <Button color=\"primary\" onClick={onSubmit}>\n            Create venue\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}\n","export const validateVenue = ({ name, type, streetAddress, city, zipcode }) => {\n\tlet valid = {\n\t\tname: false,\n\t\ttype: false,\n\t\tstreetAddress: false,\n\t\tcity: false,\n\t\tzipcode: false\n\t}\n\n\tif (name && name.length >= 2) {\n\t\tvalid.name = true\n\t}\n\n\tif(type && type.id) {\n\t\tvalid.type = true\n\t}\n\n\tif(streetAddress && streetAddress.length >= 2) {\n\t\tvalid.streetAddress = true\n\t}\n\n\tif(city && city.id) {\n\t\tvalid.city = true\n\t}\n\n\tif(zipcode && !isNaN(parseInt(zipcode))) {\n\t\tvalid.zipcode = true\n\t}\n\n\treturn (Object.values(valid).indexOf(false) === -1)\n}","import React from 'react'\nimport AppBar from \"@material-ui/core/AppBar/AppBar\"\nimport Tabs from \"@material-ui/core/Tabs\"\nimport Tab from \"@material-ui/core/Tab\"\nimport { withStyles } from \"@material-ui/core\"\n\nconst styles = {\n\tappBar: {\n\t\tboxShadow: \"none\",\n\t\tfloat: \"left\",\n\t\twidth: '300px',\n\t},\n\ttabIndicator: {\n\t\tbackgroundColor: '#ffffff',\n\t},\n}\n\nconst VenueTypeTabs = ({ classes, venues, venueTypeFilter, onSetVenueTypeFilter }) => {\n\tconst handleVenueTypeClick = (e, value) => {\n\t\tonSetVenueTypeFilter(value)\n\t}\n\n\tconst getVenueTypes = venues => {\n\t\tlet results = {}\n\n\t\tfor (let x = 0; x < venues.length; x++) {\n\t\t\tif ((venues[x].venueTypes && venues[x].venueTypes.length)) {\n\t\t\t\tif (results[venues[x].venueTypes[0].name]) {\n\t\t\t\t\tresults[venues[x].venueTypes[0].name].venues.push(venues[x])\n\t\t\t\t} else {\n\t\t\t\t\tresults[venues[x].venueTypes[0].name] = {\n\t\t\t\t\t\ttype: {\n\t\t\t\t\t\t\tid: venues[x].venueTypes[0].id,\n\t\t\t\t\t\t\tname: venues[x].venueTypes[0].name,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tvenues: [venues[x]],\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn Object.keys(results)\n\t}\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<AppBar position=\"static\" className={classes.appBar}>\n\t\t\t\t<Tabs value={venueTypeFilter}\n\t\t\t\t\t\t\tonChange={handleVenueTypeClick}\n\t\t\t\t\t\t\tclasses={{ indicator: classes.tabIndicator }}\n\t\t\t\t\t\t\torientation=\"vertical\"\n\t\t\t\t\t\t\tvariant=\"scrollable\"\n\t\t\t\t\t\t\tscrollButtons=\"auto\">\n\t\t\t\t\t<Tab label='all' value='all'/>\n\t\t\t\t\t{getVenueTypes(venues).sort().map((type, index) => (\n\t\t\t\t\t\t<Tab label={type} value={type} key={index}/>\n\t\t\t\t\t))}\n\t\t\t\t</Tabs>\n\t\t\t</AppBar>\n\t\t</React.Fragment>\n\t)\n}\n\nexport default withStyles(styles)(VenueTypeTabs)","import React from 'react'\nimport {\n  DirectionsRun,\n  DirectionsWalk,\n  NearMe,\n  Restaurant,\n  Museum,\n  Nature,\n  NaturePeople,\n  Pets\n} from '@material-ui/icons'\n\nexport const venueMapLink = venue => {\n  const address = `${venue.streetAddress}, ${venue.city}, ${venue.state} ${venue.zipcode}`\n  return `https://maps.google.com/?q=${encodeURIComponent(address)}`\n}\n\nexport const venueIcon = (venue, cssClass) => {\n  let venueIconComponent\n\n  switch (venue.venueTypes[0].name) {\n    case 'restaurant':\n      venueIconComponent = <Restaurant className={cssClass} />\n      break\n    case 'museum':\n      venueIconComponent = <Museum className={cssClass} />\n      break\n    case 'zoo':\n      venueIconComponent = <Pets className={cssClass} />\n      break\n    case 'hiking trail':\n      venueIconComponent = <DirectionsWalk className={cssClass} />\n      break\n    case 'outdoor park':\n      venueIconComponent = <Nature className={cssClass} />\n      break\n    case 'camp site':\n      venueIconComponent = <NaturePeople className={cssClass} />\n      break\n    case 'outdoor playground':\n      venueIconComponent = <DirectionsRun className={cssClass} />\n      break\n    default:\n      venueIconComponent = <NearMe className={cssClass} />\n  }\n\n  return venueIconComponent\n}\n\nexport const venueHeaderImage = venue =>\n  venue.venueTypes[0].image || 'restaurant-header-cmp.jpg'\n\nexport const venuePrimaryTypeName = venue => venue.venueTypes[0].name || 'venue'\n\nexport const venueCityState = venue => `${venue.city}, ${venue.state}`\n\nexport const venueAddress = (venue, separator = ', ', format = '') => {\n  if (venue) {\n    if (format === 'raw') {\n      return `${venue.streetAddress}${separator}${venueCityState(venue)} ${\n        venue.zipcode\n      }`\n    } else {\n      return (\n        <span>\n          {venue.streetAddress}\n          {separator}\n          {venueCityState(venue)} {venue.zipcode}\n        </span>\n      )\n    }\n  }\n\n  return ''\n}\n","import React from 'react'\nimport { withStyles } from '@material-ui/core/styles'\n\nimport { venueMapLink, venueIcon, venueCityState } from '../../utils/venueUtils'\nimport { Link as RouterLink } from 'react-router-dom'\nimport Routes from '../../routes'\nimport { useMutation } from '@apollo/client'\nimport { DELETE_USER_VENUE_FAVORITE_MUTATION } from '../../graphql/venueMutations'\nimport {\n  GET_VENUE_BY_SLUG,\n  GET_VENUES_FOR_CURRENT_USER\n} from '../../graphql/venueQueries'\n\nconst styles = {\n  '@global': {\n    '.venueItem': {\n      border: '1px solid #eee',\n      borderRadius: '8px',\n      marginTop: '5px',\n      marginBottom: '5px',\n      // backgroundColor: '#f6f6f6',\n      padding: '15px',\n      width: '49%',\n      display: 'inline-block',\n      '&:nth-child(odd)': {\n        marginRight: '10px'\n      }\n    },\n    '.venueItemTitle': {\n      display: 'block',\n      fontSize: '18px',\n      fontWeight: 500,\n      lineHeight: 1.6,\n      color: '#333333',\n      textDecoration: 'none',\n      '&:hover': {\n        textDecoration: 'underline'\n      }\n    },\n    '.venueItemDescription': {},\n    '.venueItemTypeBadge': {\n      display: 'inline-block',\n      padding: '1px 5px',\n      backgroundColor: '#2196f3',\n      color: '#fff',\n      borderRadius: '3px',\n      height: '22px'\n    },\n    '.venueItemTypeBadgeText': {\n      marginLeft: '20px',\n      marginTop: '3px',\n      textTransform: 'uppercase',\n      fontSize: '11px',\n      fontWeight: 600,\n      minWidth: '75px',\n      textAlign: 'center'\n    },\n    '.venueItemLocation': {\n      textTransform: 'uppercase',\n      fontSize: '11px',\n      fontWeight: 600,\n      textDecoration: 'none',\n      float: 'right',\n      marginTop: '4px',\n      color: '#666'\n    },\n    '.venueIcon': {\n      float: 'left',\n      width: '15px',\n      height: 'auto',\n      marginRight: '5px',\n      position: 'relative',\n      top: '2px'\n    },\n    '.venueUnlike': {\n      float: 'right'\n    }\n  }\n}\n\nconst VenueListItem = props => {\n  const { venue, showDeleteFavoriteButton, onDeleteFavoriteCallback } = props\n\n  const [deleteFavorite] = useMutation(DELETE_USER_VENUE_FAVORITE_MUTATION, {\n    onError(error) {\n      console.log('error', error)\n    },\n    update: (store, { data: { deleteUserVenueFavorite } }) => {\n      updateFavoriteStats(store, deleteUserVenueFavorite)\n    },\n    onCompleted: () => {\n      onDeleteFavoriteCallback()\n    },\n    refetchQueries: [\n      {\n        query: GET_VENUES_FOR_CURRENT_USER\n      }\n    ],\n    awaitRefetchQueries: true\n  })\n\n  const updateFavoriteStats = (store, venueStats) => {\n    try {\n      let data = store.readQuery({\n        query: GET_VENUE_BY_SLUG,\n        variables: { venueSlug: venue.slug }\n      })\n\n      data.venueBySlug.venueStats = venueStats\n\n      store.writeQuery({\n        query: GET_VENUE_BY_SLUG,\n        variables: { venueSlug: venue.slug },\n        data\n      })\n    } catch (e) {}\n  }\n\n  const onDeleteFavorite = () =>\n    deleteFavorite({\n      variables: {\n        venueId: venue.id\n      }\n    })\n\n  return (\n    <div className=\"venueItem\">\n      {showDeleteFavoriteButton && (\n        <button\n          onClick={() => {\n            onDeleteFavorite()\n          }}\n          className=\"venueUnlike\"\n        >\n          Unlike\n        </button>\n      )}\n\n      <RouterLink to={Routes.venuePath(venue.slug)} className=\"venueItemTitle\">\n        {venue.name}\n      </RouterLink>\n      <div className=\"venueItemDescription\">\n        <div className=\"venueItemTypeBadge\">\n          {venueIcon(venue, 'venueIcon')}\n          <div className=\"venueItemTypeBadgeText\">\n            {venue.venueTypes && venue.venueTypes.length\n              ? `${venue.venueTypes[0].name}`\n              : ''}\n          </div>\n        </div>\n        <a\n          href={venueMapLink(venue)}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"venueItemLocation\"\n        >\n          {venueCityState(venue)}\n        </a>\n      </div>\n    </div>\n  )\n}\n\nexport default withStyles(styles)(VenueListItem)\n","import React, { Fragment, useEffect, useState } from 'react'\nimport VenueTypeTabs from './venueTypeTabs'\nimport VenueListItem from './venueListItem'\nimport { withStyles } from '@material-ui/core/styles'\nimport { GET_VENUES_FOR_CURRENT_USER } from '../../graphql/venueQueries'\nimport { useApolloClient } from '@apollo/client'\n\nconst styles = {\n  '@global': {\n    '.venueList': {\n      marginLeft: '320px'\n    }\n  }\n}\n\nconst VenueList = ({\n  currentDashboardSection,\n  isFavoritesDashboardSection,\n  externalTriggerVenueRefresh\n}) => {\n  const client = useApolloClient()\n  const [venueTypeFilter, setVenueTypeFilter] = useState('all')\n  const [venues, setVenues] = useState([])\n  const [triggerVenueRefresh, setTriggerVenueRefresh] = useState(true)\n\n  useEffect(() => {\n    const getVenueData = () => {\n      client\n        .query({\n          query: GET_VENUES_FOR_CURRENT_USER\n        })\n        .then(({ data }) => {\n          setVenues(\n            isFavoritesDashboardSection\n              ? data.me.favoriteVenues\n              : data.me.venues\n          )\n        })\n    }\n\n    getVenueData()\n    setVenueTypeFilter('all')\n  }, [\n    currentDashboardSection,\n    triggerVenueRefresh,\n    externalTriggerVenueRefresh,\n    isFavoritesDashboardSection,\n    client\n  ])\n\n  const onDeleteFavorite = () => {\n    setTriggerVenueRefresh(!triggerVenueRefresh)\n  }\n\n  return (\n    <Fragment>\n      <VenueTypeTabs\n        venues={venues}\n        onSetVenueTypeFilter={setVenueTypeFilter}\n        venueTypeFilter={venueTypeFilter}\n      ></VenueTypeTabs>\n      <div className=\"venueList\">\n        {venues\n          .filter(\n            venue =>\n              venueTypeFilter === 'all' ||\n              venue.venueTypes[0].name === venueTypeFilter\n          )\n          .map(venue => (\n            <VenueListItem\n              key={venue.id}\n              venue={venue}\n              showDeleteFavoriteButton={isFavoritesDashboardSection}\n              onDeleteFavoriteCallback={onDeleteFavorite}\n            />\n          ))}\n      </div>\n    </Fragment>\n  )\n}\n\nexport default withStyles(styles)(VenueList)\n","import { gql } from '@apollo/client'\n\nexport const SIGNUP_MUTATION = gql`\n  mutation SignupMutation(\n    $email: String!\n    $password: String!\n    $firstName: String!\n    $lastName: String!\n  ) {\n    signup(\n      email: $email\n      password: $password\n      firstName: $firstName\n      lastName: $lastName\n    ) {\n      token\n      user {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n`\n\nexport const LOGIN_MUTATION = gql`\n  mutation LoginMutation($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n`\n\nexport const UPDATE_CURRENT_USER_FEED_CONFIG_MUTATION = gql`\n  mutation UpdateCurrentUserFeedConfigMutation(\n    $cityIds: String\n    $venueTypeIds: String\n  ) {\n    updateUserFeedConfig(cityIds: $cityIds, venueTypeIds: $venueTypeIds) {\n      cityIds\n      venueTypeIds\n    }\n  }\n`\n","import React, { Fragment } from 'react'\nimport { withStyles } from '@material-ui/core/styles'\nimport { sinceCreated } from '../../utils/dateUtils'\nimport { shortName } from '../../utils/userUtils'\nimport Routes from '../../routes'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { venueCityState } from '../../utils/venueUtils'\n\nconst styles = {\n  '@global': {\n    '.feedItem': {\n      borderBottom: '1px solid #eee',\n      marginTop: '5px',\n      marginBottom: '5px',\n      padding: '15px'\n    },\n    '.feedItemTitle': {\n      fontWeight: 600,\n      color: '#000',\n      textDecoration: 'none',\n      fontSize: '15px',\n      '&:hover': {\n        textDecoration: 'underline'\n      }\n    },\n    '.feedItemSubtitle': {\n      fontSize: '12px'\n    }\n  }\n}\n\nconst FeedItem = ({ venue }) => {\n  const creatorInfo = () => {}\n\n  return (\n    <div className=\"feedItem\">\n      <RouterLink to={Routes.venuePath(venue.slug)} className=\"feedItemTitle\">\n        {venue.name}\n      </RouterLink>\n      <div className=\"feedItemSubtitle\">\n        in {venueCityState(venue)}\n        {venue.creator && (\n          <Fragment>\n            <br />\n            added {sinceCreated(venue.createdAt)} by &nbsp;\n            <RouterLink to={Routes.userProfilePath(venue.creator.id)}>\n              {shortName(venue.creator)}\n            </RouterLink>\n          </Fragment>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default withStyles(styles)(FeedItem)\n","export const localDateTime = timestamp => {\n  return new Date(timestamp).toLocaleString()\n}\n\nexport const sinceCreated = timestamp => {\n  const then = new Date(timestamp)\n  const now = new Date()\n\n  const diffSeconds = (now.getTime() - then.getTime()) / 1000\n\n  let response\n\n  if (diffSeconds <= 60) {\n    response = 'now'\n  } else if (diffSeconds < 90) {\n    response = Math.round(diffSeconds / 60) + ' minute ago'\n  } else if (diffSeconds <= 3600) {\n    response = Math.round(diffSeconds / 60) + ' minutes ago'\n  } else if (diffSeconds < 5400) {\n    response = Math.round(diffSeconds / 3600) + ' hour ago'\n  } else if (diffSeconds <= 86400) {\n    response = Math.round(diffSeconds / 3600) + ' hours ago'\n  } else {\n    response =\n      'on ' +\n      then.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      })\n  }\n\n  return response\n}\n","import React, { useState, useEffect } from 'react'\nimport Select from 'react-select'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport { GET_VENUE_TYPES } from '../../graphql/venueQueries'\nimport { useApolloClient } from '@apollo/client'\n\nconst style = {\n  container: {\n    position: 'relative',\n    width: '350px',\n    display: 'inline-block'\n  },\n  formControl: {\n    minWidth: '500px',\n    marginTop: '16px',\n    marginBottom: '8px',\n    height: '16px'\n  }\n}\n\nconst VenueTypeMultiFormField = ({ initialValue, onVenueTypeSelected }) => {\n  const client = useApolloClient()\n  const [selectedOption, setSelectedOption] = useState([])\n  const [options, setOptions] = useState([])\n\n  useEffect(() => {\n    client\n      .query({\n        query: GET_VENUE_TYPES\n      })\n      .then(({ data }) => {\n        setOptions(\n          data.venueTypes.map(venueType => {\n            return { value: venueType.id, label: venueType.name }\n          })\n        )\n      })\n  }, [client])\n\n  useEffect(() => {\n    if (options && options.length && initialValue) {\n      const defaultVenueTypeIds = initialValue.split(',').map(venueTypeId => {\n        return parseInt(venueTypeId)\n      })\n\n      setSelectedOption(\n        options.filter(venueType =>\n          defaultVenueTypeIds.includes(venueType.value)\n        )\n      )\n    }\n  }, [options, initialValue])\n\n  const handleOptionChange = option => {\n    setSelectedOption(option)\n    onVenueTypeSelected(option)\n  }\n\n  return (\n    <div style={style.container}>\n      <FormControl style={style.formControl}>\n        <InputLabel shrink={true} htmlFor=\"age-simple\">\n          Venue type\n        </InputLabel>\n      </FormControl>\n      <Select\n        value={selectedOption}\n        defaultValue={null}\n        onChange={handleOptionChange}\n        options={options}\n        placeholder=\"Select venue type\"\n        isClearable={true}\n        isMulti={true}\n        isSearchable={false}\n        escapeClearsValue={true}\n      />\n    </div>\n  )\n}\n\nexport default VenueTypeMultiFormField\n","import React, { useState, useEffect } from 'react'\nimport CityFormField from './cityFormField'\nimport VenueTypeMultiFormField from './venueTypeMultiFormField'\n\nconst FeedConfigurator = ({\n  feedConfiguration,\n  onFeedConfigurationUpdated\n}) => {\n  const [cityIds, setCityIds] = useState()\n  const [venueTypeIds, setVenueTypeIds] = useState()\n\n  useEffect(() => {\n    setCityIds(feedConfiguration.cityIds)\n    setVenueTypeIds(feedConfiguration.venueTypeIds)\n  }, [feedConfiguration])\n\n  const onCitySelected = cities => {\n    const ids = cities ? cities.map(city => city.value).join(',') : null\n    setCityIds(ids)\n    onFeedConfigurationUpdated({ cityIds: ids, venueTypeIds })\n  }\n\n  const onVenueTypeSelected = venueTypes => {\n    const ids = venueTypes\n      ? venueTypes.map(venueType => venueType.value).join(',')\n      : null\n    setVenueTypeIds(ids)\n    onFeedConfigurationUpdated({ venueTypeIds: ids, cityIds })\n  }\n\n  return (\n    <div>\n      <CityFormField\n        onCitySelected={onCitySelected}\n        fieldLabel=\"Filter feed by city\"\n        placeholder=\"e.g.: San Francisco, CA\"\n        isMulti={true}\n        containerWidth=\"350px\"\n        containerDisplay=\"inline-block\"\n        initialValue={feedConfiguration.cityDetails}\n      ></CityFormField>\n      <div\n        style={{ display: 'inline-block', width: '30px', height: '20px' }}\n      ></div>\n      <VenueTypeMultiFormField\n        initialValue={venueTypeIds}\n        onVenueTypeSelected={onVenueTypeSelected}\n      ></VenueTypeMultiFormField>\n    </div>\n  )\n}\n\nexport default FeedConfigurator\n","import React, { useEffect, useState } from 'react'\nimport { useMutation, useApolloClient } from '@apollo/client'\nimport { withStyles } from '@material-ui/core/styles'\nimport { GET_FEED_VENUES } from '../../graphql/venueQueries'\nimport { CURRENT_USER_FEED_CONFIG_QUERY } from '../../graphql/userQueries'\nimport { UPDATE_CURRENT_USER_FEED_CONFIG_MUTATION } from '../../graphql/userMutations'\n\nimport FeedItem from './feedItem'\nimport FeedConfigurator from './feedConfigurator'\n\nconst styles = {\n  '@global': {\n    '.feedContainer': {\n      maxWidth: '50%',\n      minWidth: '400px'\n    }\n  }\n}\n\nconst Feed = () => {\n  const client = useApolloClient()\n  const [feedVenues, setFeedVenues] = useState([])\n  const [feedConfiguration, setFeedConfiguration] = useState({\n    cityIds: null,\n    venueTypeIds: null,\n    sort: 'DESC',\n    first: 25,\n    init: false\n  })\n\n  const [updateCurrentUserFeedConfigMutation] = useMutation(\n    UPDATE_CURRENT_USER_FEED_CONFIG_MUTATION\n  )\n\n  useEffect(() => {\n    client\n      .query({\n        query: CURRENT_USER_FEED_CONFIG_QUERY\n      })\n      .then(({ data }) => {\n        setFeedConfiguration({\n          init: true,\n          sort: 'DESC',\n          first: 25,\n          ...data.userFeedConfig\n        })\n      })\n  }, [client])\n\n  useEffect(() => {\n    if (feedConfiguration.init) {\n      client\n        .query({\n          query: GET_FEED_VENUES,\n          variables: {\n            ...feedConfiguration\n          }\n        })\n        .then(({ data }) => {\n          setFeedVenues(data.venues)\n        })\n    }\n  }, [client, feedConfiguration])\n\n  const onFeedConfigurationUpdated = newFeedConfiguration => {\n    if (newFeedConfiguration) {\n      setFeedConfiguration({ ...newFeedConfiguration, init: true })\n    }\n\n    updateCurrentUserFeedConfigMutation({\n      variables: {\n        cityIds: newFeedConfiguration.cityIds,\n        venueTypeIds: newFeedConfiguration.venueTypeIds\n      }\n    })\n  }\n\n  return (\n    <div>\n      <FeedConfigurator\n        feedConfiguration={feedConfiguration}\n        onFeedConfigurationUpdated={onFeedConfigurationUpdated}\n      ></FeedConfigurator>\n      <div className=\"feedContainer\">\n        {feedVenues.map(venue => (\n          <FeedItem key={venue.id} venue={venue}></FeedItem>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default withStyles(styles)(Feed)\n","import React from 'react'\n\nconst withPageTemplate = WrappedComponent =>\n  class NewComponent extends React.Component {\n    render() {\n      return (\n        <div className=\"mainContainer\">\n          <div className=\"mainContent\">\n            <WrappedComponent {...this.props}></WrappedComponent>\n          </div>\n        </div>\n      )\n    }\n  }\n\nexport default withPageTemplate\n","import React, { useState } from 'react'\nimport { withStyles } from '@material-ui/core/styles'\nimport { Link as RouterLink } from 'react-router-dom'\nimport Button from '@material-ui/core/Button'\nimport { Add } from '@material-ui/icons'\nimport Routes from '../routes'\n\nimport AddVenueDialog from './dashboard/addVenueDialog'\nimport VenueList from './dashboard/venueList'\nimport Feed from './dashboard/feed'\nimport withPageTemplate from './shared/withPageTemplate'\n\nconst DASHBOARD_SECTION = {\n  FEED: 'feed',\n  FOLLOWED_DESTINATIONS: 'followed-destinations',\n  MY_DESTINATIONS: 'my-destinations',\n  FAVORITES: 'favorites'\n}\n\nconst styles = {\n  '@global': {\n    '.sectionHeader': {\n      marginBottom: '30px',\n      display: 'flex'\n    },\n    '.sectionHeaderTitle': {\n      flexGrow: 2,\n      maxWidth: '250px',\n      cursor: 'pointer',\n      textDecoration: 'none',\n      color: '#666',\n      textAlign: 'center',\n      textTransform: 'uppercase',\n      borderRadius: '8px',\n      margin: '0px 10px',\n      fontSize: '14px',\n      fontWeight: 600,\n      lineHeight: 2.5,\n      letterSpacing: '1.3px',\n      border: '1px solid #eee'\n    },\n    '.sectionHeaderTitleSelected': {\n      backgroundColor: '#f9f8f8'\n    },\n    '.venueList': {\n      marginLeft: '320px'\n    }\n  }\n}\n\nconst DashboardPage = ({ match }) => {\n  const currentDashboardSection = Routes.validatePageSection(\n    match.params.section,\n    DASHBOARD_SECTION,\n    DASHBOARD_SECTION.FEED\n  )\n\n  const [dialogOpen, setDialogOpen] = useState(false)\n  const [\n    externalTriggerVenueRefresh,\n    setExternalTriggerVenueRefresh\n  ] = useState(true)\n\n  const toggleDialog = () => {\n    setDialogOpen(!dialogOpen)\n  }\n\n  const renderDashboardSection = (text, dashboardSection) => {\n    return (\n      <RouterLink\n        to={Routes.dashboardPath(dashboardSection)}\n        className={`sectionHeaderTitle ${\n          currentDashboardSection === dashboardSection\n            ? 'sectionHeaderTitleSelected'\n            : ''\n        }`}\n      >\n        {text}\n      </RouterLink>\n    )\n  }\n\n  const onCreatedVenue = () =>\n    setExternalTriggerVenueRefresh(!externalTriggerVenueRefresh)\n\n  return (\n    <React.Fragment>\n      <div className=\"sectionHeader\">\n        {renderDashboardSection('Feed', DASHBOARD_SECTION.FEED)}\n        {renderDashboardSection(\n          'My destinations',\n          DASHBOARD_SECTION.MY_DESTINATIONS\n        )}\n        {renderDashboardSection(\n          'Favorite destinations',\n          DASHBOARD_SECTION.FAVORITES\n        )}\n        <Button\n          variant=\"outlined\"\n          style={{ marginLeft: 'auto' }}\n          onClick={toggleDialog}\n        >\n          <Add />\n          Add Destination\n        </Button>\n        <AddVenueDialog\n          open={dialogOpen}\n          toggleDialog={toggleDialog}\n          onCreatedVenue={onCreatedVenue}\n        />\n      </div>\n      {currentDashboardSection === DASHBOARD_SECTION.FEED ? (\n        <Feed></Feed>\n      ) : (\n        <VenueList\n          currentDashboardSection={currentDashboardSection}\n          isFavoritesDashboardSection={\n            currentDashboardSection === DASHBOARD_SECTION.FAVORITES\n          }\n          externalTriggerVenueRefresh={externalTriggerVenueRefresh}\n        ></VenueList>\n      )}\n    </React.Fragment>\n  )\n}\n\nexport default withStyles(styles)(withPageTemplate(DashboardPage))\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport { headerStyles } from '../../utils/styleUtils'\nimport { venueHeaderImage } from '../../utils/venueUtils'\n\nexport default props => {\n  const { venue } = props\n  const headerStyle = headerStyles(\n    `/images/${venueHeaderImage(venue)}`,\n    '300px'\n  )\n\n  return (\n    <div style={headerStyle.container}>\n      <Typography variant=\"h2\" style={headerStyle.headerText}>\n        <strong>{venue.name}</strong>\n      </Typography>\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { GET_SIMILAR_VENUES_IN_RADIUS } from '../../graphql/venueQueries'\nimport '../shared/sidebarModule.css'\nimport { Link as RouterLink } from 'react-router-dom'\nimport Routes from '../../routes'\nimport { useApolloClient } from '@apollo/client'\n\nconst SimilarVenues = ({ venue }) => {\n  const client = useApolloClient()\n  const [similarVenues, setSimilarVenues] = useState([])\n  useEffect(() => {\n    client\n      .query({\n        query: GET_SIMILAR_VENUES_IN_RADIUS,\n        variables: { venueId: venue.id, limit: 5, radius: 10 }\n      })\n      .then(({ data }) => {\n        setSimilarVenues(data.similarVenues)\n      })\n  }, [venue, client])\n\n  return (\n    <div\n      className=\"sidebar-module\"\n      style={{\n        display: similarVenues && similarVenues.length ? 'block' : 'none'\n      }}\n    >\n      <h3>Similar places near by</h3>\n      <div className=\"sidebar-module-body\">\n        {similarVenues &&\n          similarVenues.map(venue => (\n            <div key={venue.id}>\n              <RouterLink to={Routes.venuePath(venue.slug)}>\n                {venue.name}\n              </RouterLink>\n            </div>\n          ))}\n      </div>\n    </div>\n  )\n}\n\nexport default SimilarVenues\n","import React from 'react'\nimport '../shared/sidebarModule.css'\nimport { venueAddress } from '../../utils/venueUtils'\nimport { GOOGLE_DIRECTIONS_URL } from '../../utils/urlUtils'\n\nconst LocationInfo = ({ venue }) => {\n  return (\n    <div className=\"sidebar-module\">\n      <h3>Location</h3>\n      <div className=\"sidebar-module-body\">\n        <a\n          href={`${GOOGLE_DIRECTIONS_URL}${encodeURIComponent(\n            venueAddress(venue, ',', 'raw')\n          )}`}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {venueAddress(venue, <br />)}\n        </a>\n      </div>\n    </div>\n  )\n}\n\nexport default LocationInfo\n","export const GOOGLE_DIRECTIONS_URL = 'https://maps.google.com/?daddr='\n","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport {\n  CREATE_USER_VENUE_FAVORITE_MUTATION,\n  DELETE_USER_VENUE_FAVORITE_MUTATION\n} from '../../graphql/venueMutations'\nimport {\n  GET_VENUE_BY_SLUG,\n  GET_VENUES_FOR_CURRENT_USER\n} from '../../graphql/venueQueries'\n\nexport default ({\n  venueId,\n  venueSlug,\n  favoriteByCurrentUser,\n  onUpdateFavoritesStats\n}) => {\n  const refetchQueries = [\n    {\n      query: GET_VENUES_FOR_CURRENT_USER\n    }\n  ]\n\n  const updateFavoriteStats = (store, venueStats) => {\n    let data = store.readQuery({\n      query: GET_VENUE_BY_SLUG,\n      variables: { venueSlug }\n    })\n\n    onUpdateFavoritesStats(venueStats)\n\n    store.writeQuery({\n      query: GET_VENUE_BY_SLUG,\n      variables: { venueSlug },\n      data: {\n        ...data,\n        venueBySlug: { ...data.venueBySlug, venueStats: { ...venueStats } }\n      }\n    })\n  }\n\n  const [addFavorite] = useMutation(CREATE_USER_VENUE_FAVORITE_MUTATION, {\n    onError(error) {\n      console.log('error', error)\n    },\n    update: (store, { data: { createUserVenueFavorite } }) => {\n      updateFavoriteStats(store, createUserVenueFavorite)\n    },\n    refetchQueries\n  })\n\n  const [deleteFavorite] = useMutation(DELETE_USER_VENUE_FAVORITE_MUTATION, {\n    onError(error) {\n      console.log('error', error)\n    },\n    update: (store, { data: { deleteUserVenueFavorite } }) => {\n      updateFavoriteStats(store, deleteUserVenueFavorite)\n    },\n    refetchQueries\n  })\n\n  const onAddFavorite = () =>\n    addFavorite({\n      variables: {\n        venueId: venueId\n      }\n    })\n\n  const onDeleteFavorite = () =>\n    deleteFavorite({\n      variables: {\n        venueId: venueId\n      }\n    })\n\n  return (\n    <React.Fragment>\n      {favoriteByCurrentUser ? (\n        <span>\n          &#9733;&nbsp;\n          <button\n            onClick={e => {\n              e.preventDefault()\n              onDeleteFavorite()\n            }}\n          >\n            {' '}\n            Unlike\n          </button>\n        </span>\n      ) : (\n        <button\n          href=\"#\"\n          onClick={e => {\n            e.preventDefault()\n            onAddFavorite()\n          }}\n        >\n          Like\n        </button>\n      )}\n    </React.Fragment>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport NumberFormat from 'react-number-format'\nimport pluralize from 'pluralize'\nimport { GET_VENUE_BY_SLUG } from '../graphql/venueQueries'\n\nimport VenueHeader from './venue/header'\nimport SimilarVenues from './venue/similarVenues'\nimport { venuePrimaryTypeName } from '../utils/venueUtils'\nimport { isUserLoggedIn } from '../utils/userUtils'\nimport LocationInfo from './venue/locationInfo'\nimport FavoriteButton from './venue/favoriteButton'\nimport { useQuery } from '@apollo/client'\n\nconst pageStyle = {\n  sectionHeader: {\n    marginBottom: '15px'\n  },\n  columnWrapper: {\n    display: 'flex'\n  },\n  mainColumn: {\n    flexGrow: 3,\n    maxWidth: '800px'\n  },\n  sideColumm: {\n    flexGrow: 1,\n    marginTop: '-20px'\n  }\n}\n\nconst VenuePage = ({ match }) => {\n  const venueSlug = match.params.venueSlug\n  const [venue, setVenue] = useState(null)\n  const [venueTypeName, setVenueTypeName] = useState('')\n\n  const { loading, error, data } = useQuery(GET_VENUE_BY_SLUG, {\n    variables: { venueSlug }\n  })\n\n  useEffect(() => {\n    if (data) {\n      setVenue(data.venueBySlug)\n      setVenueTypeName(venuePrimaryTypeName(data.venueBySlug))\n    }\n  }, [data])\n\n  const onUpdateFavoritesStats = venueStats => {\n    setVenue({ ...venue, venueStats: { ...venueStats } })\n  }\n\n  if (loading) return null\n  if (error) return `Error! ${error}`\n\n  if (!venueSlug) {\n    return <div>Venue not found.</div>\n  } else {\n    return (\n      venue && (\n        <div>\n          <VenueHeader venue={venue} />\n          <div className=\"mainContainer\">\n            <div className=\"mainContent\">\n              <Typography variant=\"h5\" style={pageStyle.sectionHeader}>\n                {venue.name}\n              </Typography>\n              <div style={pageStyle.columnWrapper}>\n                <div style={pageStyle.mainColumn}>\n                  <div>\n                    Liked by{' '}\n                    <strong>\n                      <NumberFormat\n                        value={venue.venueStats.favorites}\n                        thousandSeparator={true}\n                        displayType={'text'}\n                      />{' '}\n                      {pluralize('person', venue.venueStats.favorites)}\n                    </strong>\n                    . &nbsp;\n                    {isUserLoggedIn() && (\n                      <FavoriteButton\n                        venueId={venue.id}\n                        venueSlug={venueSlug}\n                        favoriteByCurrentUser={\n                          venue.venueStats.favoriteByCurrentUser\n                        }\n                        onUpdateFavoritesStats={onUpdateFavoritesStats}\n                      />\n                    )}\n                  </div>\n                  <br />\n                  {venue.description && <span>{venue.description}</span>}\n                  This {venueTypeName} is located in {venue.city}, {venue.state}\n                  .\n                </div>\n                <div style={pageStyle.sideColumm}>\n                  <LocationInfo venue={venue} />\n                  <SimilarVenues venue={venue} />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    )\n  }\n}\n\nexport default VenuePage\n","import { createMuiTheme } from '@material-ui/core/styles'\nimport blue from '@material-ui/core/colors/blue'\n\nexport default createMuiTheme({\n  palette: {\n    primary: {\n      main: blue[500]\n    },\n    background: { default: '#efefef' }\n  },\n  typography: {\n    useNextVariants: true\n  }\n})\n","import React, { Component } from 'react'\nimport { withRouter } from 'react-router'\n\nimport { setUserInfo } from '../../utils/userUtils'\nimport Routes from '../../routes'\nimport { Mutation } from '@apollo/client/react/components'\nimport { SIGNUP_MUTATION, LOGIN_MUTATION } from '../../graphql/userMutations'\nimport { CURRENT_USER_QUERY } from '../../graphql/userQueries'\n\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\n\nimport { withStyles } from '@material-ui/core/styles'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\n\nconst styles = {\n  dialogMainContent: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column'\n  },\n  dialogMainError: {\n    textAlign: 'center'\n  }\n}\n\nclass LoginDialog extends Component {\n  state = {\n    login: this.props.login !== undefined ? this.props.login : true, // switch between Login and SignUp\n    email: '',\n    password: '',\n    firstName: '',\n    lastName: '',\n    errorMessage: null\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.open !== this.props.open) {\n      this.setState({ errorMessage: null })\n    }\n\n    if (prevProps.login !== this.props.login) {\n      this.setState({ login: this.props.login })\n    }\n  }\n\n  render() {\n    const {\n      login,\n      email,\n      password,\n      firstName,\n      lastName,\n      errorMessage\n    } = this.state\n    const { classes } = this.props\n    return (\n      <Dialog\n        open={this.props.open}\n        onClose={this.props.toggleDialog}\n        maxWidth=\"sm\"\n        fullWidth={true}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"login-dialog-title\">\n          {login ? 'Login' : 'Sign Up'}\n        </DialogTitle>\n        <DialogContent>\n          {errorMessage && (\n            <DialogContentText className={classes.dialogMainError}>\n              {errorMessage}\n            </DialogContentText>\n          )}\n          <div className={classes.dialogMainContent}>\n            {!login && (\n              <span>\n                <TextField\n                  id=\"firstName\"\n                  label=\"First name\"\n                  error={!!errorMessage}\n                  value={firstName}\n                  onChange={e => this.setState({ firstName: e.target.value })}\n                  margin=\"normal\"\n                  fullWidth\n                />\n                <TextField\n                  id=\"lastName\"\n                  label=\"Last name\"\n                  error={!!errorMessage}\n                  value={lastName}\n                  onChange={e => this.setState({ lastName: e.target.value })}\n                  margin=\"normal\"\n                  fullWidth\n                />\n              </span>\n            )}\n            <TextField\n              id=\"email\"\n              label=\"Email\"\n              error={!!errorMessage}\n              value={email}\n              onChange={e => this.setState({ email: e.target.value })}\n              margin=\"normal\"\n              fullWidth\n            />\n            <TextField\n              id=\"password\"\n              label=\"Password\"\n              error={!!errorMessage}\n              type=\"password\"\n              autoComplete=\"current-password\"\n              onChange={e => this.setState({ password: e.target.value })}\n              margin=\"normal\"\n              fullWidth\n            />\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={() => this.setState({ login: !login, errorMessage: null })}\n            color=\"primary\"\n            style={{ marginRight: 'auto' }}\n          >\n            {login ? 'need to create an account?' : 'already have an account?'}\n          </Button>\n\n          <Button onClick={this.props.toggleDialog} color=\"primary\">\n            Cancel\n          </Button>\n          <Mutation\n            mutation={login ? LOGIN_MUTATION : SIGNUP_MUTATION}\n            variables={{ email, password, firstName, lastName }}\n            update={(cache, { data }) =>\n              this._update(cache, login ? data.login : data.signup)\n            }\n            onCompleted={data => this._confirm(data)}\n            onError={error => this._error(error)}\n          >\n            {mutation => (\n              <Button color=\"primary\" onClick={mutation}>\n                {login ? 'login' : 'create account'}\n              </Button>\n            )}\n          </Mutation>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  _update = async (cache, info) => {\n    cache.writeQuery({\n      query: CURRENT_USER_QUERY,\n      data: {\n        currentUser: {\n          ...info.user,\n          token: info.token\n        }\n      }\n    })\n  }\n\n  _confirm = async data => {\n    this.state.error = null\n\n    const { token, user } = this.state.login ? data.login : data.signup\n    this._saveUserData(token, user)\n\n    document.location = Routes.dashboardPath('')\n  }\n\n  _saveUserData = (token, user) => {\n    setUserInfo(token, user)\n  }\n\n  _error = async ({ graphQLErrors }) => {\n    if (\n      this.state.login &&\n      graphQLErrors &&\n      graphQLErrors[0] &&\n      graphQLErrors[0].message\n    ) {\n      this.setState({ errorMessage: graphQLErrors[0].message })\n    } else if (\n      graphQLErrors &&\n      graphQLErrors[0] &&\n      graphQLErrors[0].extensions.exception.errors[0].message\n    ) {\n      this.setState({\n        errorMessage: graphQLErrors[0].extensions.exception.errors[0].message\n      })\n    }\n  }\n}\n\nexport default withRouter(withStyles(styles)(LoginDialog))\n","import React, { useEffect, useState } from 'react'\nimport Button from '@material-ui/core/Button'\nimport { withRouter } from 'react-router'\n// import { useQuery } from '@apollo/client'\nimport {\n  isUserLoggedIn,\n  withCurrentUser,\n  listenForOpenSignUpDialog\n} from '../../utils/userUtils'\nimport LoginDialog from './loginDialog'\nimport Typography from '@material-ui/core/Typography'\n// import { CURRENT_USER_QUERY } from '../../graphql/userQueries'\n\nconst LoginButton = ({ currentUser, className }) => {\n  const [dialogOpen, setDialogOpen] = useState(false)\n  const [login, setLogin] = useState(true)\n\n  useEffect(() => {\n    listenForOpenSignUpDialog(() => {\n      this.setState({ dialogOpen: true, login: false })\n      setDialogOpen(true)\n      setLogin(false)\n    })\n  })\n\n  const toggleDialog = () => {\n    setDialogOpen(!dialogOpen)\n    setLogin(true)\n  }\n\n  const renderUserInfo = currentUser => {\n    if (currentUser && currentUser.id) {\n      return `Welcome, ${currentUser.firstName}`\n    } else {\n      return ''\n    }\n  }\n\n  // const { data } = useQuery(CURRENT_USER_QUERY)\n  // console.log('data', data)\n\n  return isUserLoggedIn() ? (\n    <Typography variant=\"button\" color=\"inherit\" className={className}>\n      {renderUserInfo(currentUser)}\n    </Typography>\n  ) : (\n    <span>\n      <Button onClick={toggleDialog} className={className} color=\"inherit\">\n        Login\n      </Button>\n      <LoginDialog\n        open={dialogOpen}\n        login={login}\n        toggleDialog={toggleDialog}\n      />\n    </span>\n  )\n}\n\nexport default withCurrentUser(withRouter(LoginButton))\n","import React, { Component } from 'react'\nimport { Link as RouterLink } from 'react-router-dom'\n\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport IconButton from '@material-ui/core/IconButton'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport Menu from '@material-ui/core/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\n\nimport LoginButton from '../components/shared/loginButton'\nimport { logoutUser, isUserLoggedIn } from '../utils/userUtils'\nimport { withRouter } from 'react-router'\n\nimport Routes from '../routes'\n\nclass ButtonAppBar extends Component {\n  state = {\n    anchorEl: null\n  }\n\n  toggleMenu = event => {\n    this.state.anchorEl\n      ? this.setState({ anchorEl: null })\n      : this.setState({ anchorEl: event.currentTarget })\n  }\n\n  render() {\n    const { classes } = this.props\n\n    return (\n      <div className={classes.root}>\n        <AppBar\n          position=\"fixed\"\n          style={{ background: 'transparent', boxShadow: 'none' }}\n        >\n          <Toolbar variant=\"dense\" className={classes.container}>\n            <Typography\n              className={classes.logoText}\n              variant=\"button\"\n              color=\"inherit\"\n            >\n              KidTrip\n            </Typography>\n            <Typography\n              variant=\"h6\"\n              color=\"inherit\"\n              className={classes.grow}\n            ></Typography>\n            <LoginButton className={classes.loginButton} />\n\n            {isUserLoggedIn() && (\n              <span className={classes.menuWrapper}>\n                <IconButton\n                  onClick={this.toggleMenu}\n                  className={classes.menuButton}\n                  color=\"inherit\"\n                  aria-label=\"Menu\"\n                >\n                  <MenuIcon />\n                </IconButton>\n                <Menu\n                  id=\"simple-menu\"\n                  anchorEl={this.state.anchorEl}\n                  open={Boolean(this.state.anchorEl)}\n                  onClose={this.toggleMenu}\n                >\n                  <MenuItem\n                    component={RouterLink}\n                    to={Routes.home}\n                    onClick={this.toggleMenu}\n                  >\n                    Home\n                  </MenuItem>\n                  <MenuItem\n                    component={RouterLink}\n                    to={Routes.dashboardPath('')}\n                    onClick={this.toggleMenu}\n                  >\n                    Dashboard\n                  </MenuItem>\n                  <MenuItem onClick={this.toggleMenu}>My account</MenuItem>\n                  <MenuItem\n                    onClick={() => {\n                      logoutUser()\n                      this.props.history.push(`/`)\n                    }}\n                  >\n                    Logout\n                  </MenuItem>\n                </Menu>\n              </span>\n            )}\n          </Toolbar>\n        </AppBar>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(ButtonAppBar)\n","import React from 'react'\nimport { isHomepage } from '../utils/routeUtils'\nimport { withStyles } from '@material-ui/core/styles'\nimport { withRouter } from 'react-router'\nimport blueGrey from '@material-ui/core/colors/blueGrey'\n\nimport AppBar from './appBar'\n\nconst styles = {\n  root: {\n    flexGrow: 1\n  },\n  grow: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20\n  },\n  menuWrapper: {\n    marginLeft: 15\n  }\n}\n\nconst nonHomepageStyles = {\n  ...styles,\n  container: {\n    borderBottom: '1px solid',\n    borderBottomColor: blueGrey[100],\n    backgroundColor: 'white'\n  },\n  grow: {\n    ...styles.grow,\n    color: blueGrey[500]\n  },\n  menuButton: {\n    ...styles.menuButton,\n    color: blueGrey[500]\n  },\n  loginButton: {\n    color: blueGrey[500]\n  },\n  logoText: {\n    color: blueGrey[500]\n  }\n}\n\nconst AppBarContainer = props => {\n  const currentStyles = isHomepage(props.location) ? styles : nonHomepageStyles\n  const AppBarWithStyles = withStyles(currentStyles)(AppBar)\n  return <AppBarWithStyles />\n}\n\nexport default withRouter(AppBarContainer)\n","import React from 'react'\nimport '../shared/sidebarModule.css'\nimport FeedItem from '../dashboard/feedItem'\n\nconst SideVenueWidget = ({ title, venues }) => {\n  console.log('here', venues)\n  return (\n    <div className=\"sidebar-module\">\n      <h3>{title}</h3>\n      <div className=\"sidebar-module-body\">\n        {venues.map(venue => (\n          <FeedItem key={venue.id} venue={venue}></FeedItem>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default SideVenueWidget\n","import React, { Fragment, useEffect, useState } from 'react'\nimport withPageTemplate from './shared/withPageTemplate'\nimport { useQuery } from '@apollo/client'\nimport { GET_USER_PROFILE_BY_PUBLIC_ID } from '../graphql/userQueries'\nimport { headerStyles } from '../utils/styleUtils'\nimport SideVenueWidget from './userProfile/sideVenueWidget'\n\nimport './userProfile/userProfile.css'\n\nconst UserProfilePage = ({ match }) => {\n  const publicId = match.params.userId\n  const [userProfile, setUserProfile] = useState(null)\n  // const { loading, error, data } = useQuery(GET_USER_PROFILE_BY_PUBLIC_ID, {\n  const { data } = useQuery(GET_USER_PROFILE_BY_PUBLIC_ID, {\n    variables: { publicId }\n  })\n\n  useEffect(() => {\n    if (data) {\n      setUserProfile(data.userProfile)\n    }\n  }, [data])\n\n  if (!publicId) {\n    return <div>User profile not found.</div>\n  } else {\n    if (userProfile) {\n      const headerStyle = headerStyles(\n        userProfile.config.headerImageUrl,\n        '300px'\n      )\n\n      return (\n        <div>\n          <div style={{ ...headerStyle.container, borderRadius: '8px' }}>\n            <div className=\"headerUserInfo\">\n              <strong>\n                {userProfile.user.firstName}\n                {userProfile.user.lastName &&\n                  userProfile.user.lastName.length && (\n                    <Fragment>&nbsp;{userProfile.user.lastName[0]}</Fragment>\n                  )}\n                .\n              </strong>\n              &nbsp;&#183;&nbsp;<span>{userProfile.stats.created} added</span>\n              &nbsp;&#183;&nbsp;<span>{userProfile.stats.favorited} liked</span>\n            </div>\n          </div>\n          <div className=\"contentContainer\">\n            <div className=\"contentContainerMain\">More to come...</div>\n            <div className=\"contentContainerSide\">\n              {userProfile.recentAddedVenues &&\n                userProfile.recentAddedVenues.length && (\n                  <SideVenueWidget\n                    title=\"Recently added\"\n                    venues={userProfile.recentAddedVenues}\n                  />\n                )}\n              {userProfile.recentFavoriteVenues &&\n                userProfile.recentFavoriteVenues.length && (\n                  <SideVenueWidget\n                    title=\"Recently liked\"\n                    venues={userProfile.recentFavoriteVenues}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      )\n    } else return false\n  }\n}\n\nexport default withPageTemplate(UserProfilePage)\n","import React, { Component } from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport { withRouter } from 'react-router'\nimport Routes from './routes'\nimport { isHomepage } from './utils/routeUtils'\n\nimport HomePage from './components/homePage'\nimport DashboardPage from './components/dashboardPage'\nimport VenuePage from './components/venuePage'\n\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { MuiThemeProvider, withStyles } from '@material-ui/core/styles'\nimport theme from './theme'\nimport AppBar from './layout/appBarContainer'\nimport UserProfilePage from './components/userProfilePage'\n\nconst styles = {\n  '@global': {\n    body: {\n      fontFamily: 'Roboto, Helvetica, Arial, sans-serif',\n      fontWeight: 400\n    },\n    '.mainContainer': {\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    '.mainContent': {\n      maxWidth: '1200px',\n      flexGrow: '1',\n      margin: '25px',\n      backgroundColor: '#ffffff',\n      padding: '25px',\n      borderRadius: '8px'\n    }\n  },\n  appBarSpacer: {\n    height: '49px'\n  }\n}\n\nclass App extends Component {\n  render() {\n    const { classes, location } = this.props\n\n    return (\n      <MuiThemeProvider theme={theme}>\n        <div>\n          <CssBaseline />\n          <AppBar />\n          {!isHomepage(location) && (\n            <div className={classes.appBarSpacer}></div>\n          )}\n          <Switch>\n            <Route exact path={Routes.home} component={HomePage} />\n            <Route path={Routes.dashboard} component={DashboardPage} />\n            <Route path={Routes.venue} component={VenuePage} />\n            <Route path={Routes.userProfile} component={UserProfilePage} />\n          </Switch>\n        </div>\n      </MuiThemeProvider>\n    )\n  }\n}\n\nexport default withRouter(withStyles(styles)(App))\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {\n  ApolloClient,\n  ApolloProvider,\n  ApolloLink,\n  HttpLink\n} from '@apollo/client'\nimport { InMemoryCache } from '@apollo/client/cache'\nimport { onError } from '@apollo/client/link/error'\n\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { BrowserRouter } from 'react-router-dom'\nimport 'typeface-roboto'\nimport { getUserInfoFromStorage } from './utils/userUtils'\nimport { AUTH_TOKEN } from './constants'\nimport { CURRENT_USER_QUERY } from './graphql/userQueries'\n\nconst SERVER_HOST = process.env.REACT_APP_SERVER_HOST\n\nconst token = localStorage.getItem(AUTH_TOKEN)\nconst httpLink = new HttpLink({\n  uri: SERVER_HOST, // || 'http://localhost:4000',\n  credentials: 'same-origin',\n  headers: {\n    authorization: token ? `Bearer ${token}` : ''\n  }\n})\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    onError(({ graphQLErrors, networkError }) => {\n      if (graphQLErrors)\n        graphQLErrors.map(({ message, locations, path }) =>\n          console.log(\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n          )\n        )\n      if (networkError) console.log(`[Network error]: ${networkError}`)\n    }),\n    httpLink\n  ]),\n  cache: new InMemoryCache(),\n  resolvers: {}\n})\n\nclient.writeQuery({\n  query: CURRENT_USER_QUERY,\n  data: {\n    currentUser: { ...getUserInfoFromStorage() }\n  }\n})\n\nReactDOM.render(\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </BrowserRouter>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}