{"version":3,"sources":["routes.js","utils/routeUtils.js","utils/styleUtils.js","components/homepage/header.js","components/homepage/valueProp/valuePropSection.js","components/homepage/valueProp.js","graphql/userQueries.js","utils/userUtils.js","constants.js","components/homepage/signup.js","components/homePage.js","graphql/venueQueries.js","utils/venueUtils.js","graphql/venueMutations.js","components/dashboard/venueListItem.js","graphql/cityQueries.js","components/dashboard/cityFormField.js","components/dashboard/venueTypeFormField.js","components/dashboard/addVenueDialog.js","utils/validationUtils.js","components/dashboard/venueTypeTabs.js","components/dashboardPage.js","components/venue/header.js","components/venue/similarVenues.js","components/venue/locationInfo.js","components/venue/favoriteButton.js","components/venuePage.js","theme.js","graphql/userMutations.js","components/shared/loginDialog.js","components/shared/loginButton.js","layout/appBar.js","layout/appBarContainer.js","App.js","serviceWorker.js","index.js"],"names":["home","dashboard","dashboardPath","section","venue","venuePath","venueSlug","validatePageSection","options","fallback","Object","values","includes","isHomepage","location","pathname","Routes","headerStyles","imageUrl","height","container","display","flexWrap","flexDirection","justifyContent","alignItems","background","backgroundSize","headerText","color","headerStyle","style","Typography","variant","props","title","icon","text","iconStyle","width","className","discoverContent","trackContent","shareContent","CURRENT_USER_QUERY","gql","isUserLoggedIn","localStorage","getItem","setUserInfo","token","user","setItem","JSON","stringify","onClick","event","Event","window","dispatchEvent","openSignUpDialog","VenueDetails","VenueStats","GET_VENUE_BY_SLUG","GET_VENUES_FOR_CURRENT_USER","GET_VENUE_TYPES","GET_SIMILAR_VENUES_IN_RADIUS","venueMapLink","address","streetAddress","city","state","zipcode","encodeURIComponent","CREATE_VENUE_MUTATION","CREATE_USER_VENUE_FAVORITE_MUTATION","DELETE_USER_VENUE_FAVORITE_MUTATION","withStyles","marginTop","marginBottom","backgroundColor","padding","marginRight","position","top","float","showDeleteFavoriteButton","onDeleteFavoriteCallback","useMutation","onError","error","console","log","update","store","deleteUserVenueFavorite","data","updateFavoriteStats","onCompleted","refetchQueries","query","awaitRefetchQueries","deleteFavorite","venueStats","readQuery","variables","slug","venueBySlug","writeQuery","e","venueId","id","component","RouterLink","to","name","cssClass","venueIconComponent","venueTypes","Restaurant","DirectionsRun","NearMe","venueIcon","length","href","target","rel","GET_CITIES","input","border","outline","fontSize","suggestionsContainer","left","suggestionItem","formControl","minWidth","withApollo","client","onCitySelected","useState","setQuery","selectedOption","setSelectedOption","setOptions","useEffect","limit","getSuggestions","then","cities","map","value","label","FormControl","InputLabel","shrink","htmlFor","onChange","option","onInputChange","placeholder","isClearable","menuIsOpen","escapeClearsValue","onVenueTypeSelected","loading","message","Select","inputProps","venueType","MenuItem","key","appBar","margin","body","venueStub","type","lat","lng","addVenue","newVenue","setNewVenue","userActionText","setUserActionText","handleChange","Dialog","open","onClose","toggleDialog","fullScreen","aria-labelledby","AppBar","Toolbar","IconButton","edge","aria-label","DialogTitle","DialogContent","DialogContentText","TextField","venueTypeId","autoComplete","customInput","format","Button","valid","isNaN","parseInt","indexOf","validateVenue","typeId","cityId","response","boxShadow","tabIndicator","classes","venues","venueTypeFilter","onSetVenueTypeFilter","Fragment","Tabs","indicator","orientation","scrollButtons","Tab","results","x","push","keys","getVenueTypes","sort","index","DASHBOARD_SECTION","FOLLOWED_DESTINATIONS","MY_DESTINATIONS","FAVORITES","flexGrow","maxWidth","fontFamily","fontWeight","lineHeight","letterSpacing","cursor","textDecoration","marginLeft","match","currentDashboardSection","params","dialogOpen","setDialogOpen","setVenueTypeFilter","setVenues","getVenueData","me","favoriteVenues","onDeleteFavorite","renderVenueGroupHeader","dashboardSection","Add","filter","image","venueHeaderImage","similarVenues","setSimilarVenues","radius","LocationInfo","separator","venueAddress","favoriteByCurrentUser","onUpdateFavoritesStats","createUserVenueFavorite","addFavorite","preventDefault","pageStyle","sectionHeader","columnWrapper","mainColumn","sideColumm","setVenue","venueTypeName","setVenueTypeName","venuePrimaryTypeName","favorites","thousandSeparator","displayType","pluralize","description","createMuiTheme","palette","primary","main","blue","default","typography","useNextVariants","WrappedComponent","SIGNUP_MUTATION","LOGIN_MUTATION","LoginDialog","login","undefined","email","password","firstName","lastName","errorMessage","_update","cache","info","a","async","writeData","currentUser","_confirm","signup","_saveUserData","document","_error","graphQLErrors","setState","extensions","exception","errors","prevProps","this","fullWidth","dialogMainError","dialogMainContent","DialogActions","mutation","Component","withRouter","textAlign","LoginButton","renderUserInfo","callback","addEventListener","withCurrentUser","compose","graphql","ButtonAppBar","anchorEl","toggleMenu","currentTarget","root","logoText","grow","loginButton","menuWrapper","menuButton","Boolean","removeItem","history","styles","nonHomepageStyles","borderBottom","borderBottomColor","blueGrey","currentStyles","AppBarWithStyles","App","theme","CssBaseline","appBarSpacer","exact","path","HomePage","DashboardPage","VenuePage","hostname","InMemoryCache","defaultState","userInfo","parse","__typename","getUserInfoFromStorage","stateLink","withClientState","defaults","resolvers","Mutation","updateUserInfo","_","httpLink","HttpLink","uri","process","credentials","headers","authorization","ApolloClient","link","ApolloLink","from","networkError","locations","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9b559c46.chunk.js","sourcesContent":["export default {\n  home: '/',\n  dashboard: '/dashboard/:section?',\n  dashboardPath: section => `/dashboard/${section}`,\n  venue: '/venue/:venueSlug',\n  venuePath: venueSlug => `/venue/${venueSlug}`,\n  validatePageSection: (section, options, fallback) =>\n    Object.values(options).includes(section) ? section : fallback\n}\n","import Routes from '../routes'\n\nexport const isHomepage = location => location.pathname === Routes.home\n","export const headerStyles = (imageUrl, height) => {\n\treturn {\n\t\tcontainer: {\n\t\t\tdisplay: 'flex',\n\t\t\tflexWrap: 'wrap',\n\t\t\tflexDirection: 'column',\n\t\t\tjustifyContent: 'center',\n\t\t\talignItems: 'center',\n\t\t\tbackground: `linear-gradient(rgba(0, 0, 0, 0.5),rgba(0, 0, 0, 0.5)),url(/images/${imageUrl}) 50% 50% no-repeat`,\n\t\t\tbackgroundSize: 'cover',\n\t\t\theight: height,\n\t\t},\n\t\theaderText: {\n\t\t\tcolor: '#ffffff',\n\t\t},\n\t}\n}","import React from \"react\"\nimport Typography from '@material-ui/core/Typography'\nimport {headerStyles} from '../../utils/styleUtils'\n\nconst headerStyle = headerStyles('family-biking-cmp.jpg', '700px')\n\nexport default () => {\n\treturn (\n\t\t<div style={headerStyle.container}>\n\t\t\t<Typography variant=\"h2\" style={headerStyle.headerText}>\n\t\t\t\t<strong>Experience</strong> childhood, again.\n\t\t\t</Typography>\n\t\t</div>)\n}","import React from \"react\";\n\nimport \"./valuePropSection.css\";\n\nexport default props => {\n  const { title, icon, text } = props;\n  const iconStyle = {\n    background: `url(/images/icons/${icon}.png) 0% 0% / 60px 60px no-repeat`,\n    width: \"60px\",\n    height: \"60px\"\n  };\n\n  return (\n    <div className=\"value-prop-section\">\n      <div className=\"value-prop-title\">{title}</div>\n      <div className=\"value-prop-icon\" style={iconStyle}></div>\n      <div className=\"value-prop-text\">{text}</div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport ValuePropSection from \"./valueProp/valuePropSection\";\nimport \"./valueProp.css\";\n\nconst discoverContent = {\n  title: \"Discover\",\n  icon: \"discover\",\n  text: `Find out about great local places to visit with your family. From restaurants, to museums, \n\tparks and playgrounds, make the most of your time!`\n};\n\nconst trackContent = {\n  title: \"Track\",\n  icon: \"track\",\n  text: `Had a great time sharing a meal with your family or enjoyed a hiking trail? Jot it down to build your \n\troster of go-to places for your trips.`\n};\n\nconst shareContent = {\n  title: \"Share\",\n  icon: \"share\",\n  text: `Share your favorite places to visit with friends and family, and hear about what others are \n\tenjoying, for great new ideas.`\n};\n\nexport default () => {\n  return (\n    <div className=\"value-prop-container\">\n      <ValuePropSection {...discoverContent} />\n      <ValuePropSection {...trackContent} />\n      <ValuePropSection {...shareContent} />\n    </div>\n  );\n};\n","import gql from \"graphql-tag\"\n\nexport const CURRENT_USER_QUERY = gql`\n\tquery {\n\t\t\tcurrentUser @client {\n\t\t\t\t\tid\n\t\t\t\t\tfirstName\n\t\t\t\t\tlastName\n\t\t\t}\n\t}\n`","import { AUTH_TOKEN, USER_INFO } from \"../constants\";\nimport { graphql } from \"react-apollo\";\nimport { compose } from \"recompose\";\nimport { CURRENT_USER_QUERY } from \"../graphql/userQueries\";\n\nexport const isUserLoggedIn = () => !!localStorage.getItem(AUTH_TOKEN);\n\nexport const logoutUser = () => {\n  localStorage.removeItem(AUTH_TOKEN);\n  localStorage.removeItem(USER_INFO);\n};\n\nexport const setUserInfo = (token, user) => {\n  localStorage.setItem(AUTH_TOKEN, token);\n  localStorage.setItem(USER_INFO, JSON.stringify(user));\n};\n\nexport const getUserInfoFromStorage = () => {\n  const userInfo = localStorage.getItem(USER_INFO);\n\n  if (userInfo) {\n    return JSON.parse(userInfo);\n  } else {\n    return {\n      __typename: \"User\",\n      id: null,\n      firstName: null,\n      lastName: null,\n      email: null\n    };\n  }\n};\n\nexport const withCurrentUser = WrappedComponent => {\n  return compose(\n    graphql(CURRENT_USER_QUERY, {\n      props: ({ data: { currentUser } }) => ({\n        currentUser\n      })\n    })\n  )(WrappedComponent);\n};\n\nexport const listenForOpenSignUpDialog = callback => {\n  window.addEventListener(\"openSignUpModal\", () => callback());\n};\nexport const openSignUpDialog = () => {\n  const event = new Event(\"openSignUpModal\");\n  window.dispatchEvent(event);\n};\n","export const AUTH_TOKEN = 'auth-token'\nexport const USER_INFO = 'user-info'","import React from 'react'\nimport { isUserLoggedIn, openSignUpDialog } from '../../utils/userUtils'\n\nimport '../shared/button.css'\nimport './signup.css'\n\nexport default () => {\n  const renderSignUp = () => {\n    return (\n      <div>\n        <button\n          className=\"form-button homepage-signup-button\"\n          onClick={() => openSignUpDialog()}\n        >\n          Get Started\n        </button>\n      </div>\n    )\n  }\n\n  return <div>{!isUserLoggedIn() && renderSignUp()}</div>\n}\n","import React from 'react'\nimport Header from './homepage/header'\nimport ValueProp from './homepage/valueProp'\nimport SignUpSection from './homepage/signup'\n\nexport default () => {\n  return (\n    <div>\n      <Header />\n      <ValueProp />\n      <SignUpSection />\n    </div>\n  )\n}\n","import gql from 'graphql-tag'\n\nconst VenueDetails = gql`\n  fragment VenueDetails on Venue {\n    id\n    name\n    slug\n    description\n    streetAddress\n    zipcode\n    city\n    state\n    lat\n    lng\n    venueTypes {\n      id\n      name\n      image\n    }\n  }\n`\n\nconst VenueStats = gql`\n  fragment VenueStats on Venue {\n    venueStats {\n      favorites\n      favoriteByCurrentUser\n    }\n  }\n`\n\nexport const GET_VENUE_BASICS = gql`\n  query($venueId: ID!) {\n    venue(id: $venueId) {\n      ...VenueDetails\n    }\n  }\n  ${VenueDetails}\n`\n\nexport const GET_VENUE_ADVANCED = gql`\n  query($venueId: ID!) {\n    venue(id: $venueId) {\n      ...VenueDetails\n      ...VenueStats\n    }\n  }\n  ${VenueDetails}\n  ${VenueStats}\n`\n\nexport const GET_VENUE_BY_SLUG = gql`\n  query($venueSlug: String!) {\n    venueBySlug(slug: $venueSlug) {\n      ...VenueDetails\n      ...VenueStats\n    }\n  }\n  ${VenueDetails}\n  ${VenueStats}\n`\n\nexport const GET_VENUES_FOR_CURRENT_USER = gql`\n  query {\n    me {\n      venues {\n        ...VenueDetails\n      }\n      favoriteVenues {\n        ...VenueDetails\n      }\n    }\n  }\n  ${VenueDetails}\n`\n\nexport const GET_VENUE_TYPES = gql`\n  query {\n    venueTypes {\n      id\n      name\n      image\n    }\n  }\n`\n\nexport const GET_SIMILAR_VENUES_IN_RADIUS = gql`\n  query($venueId: ID!, $limit: Int, $radius: Int) {\n    similarVenues(id: $venueId, first: $limit, radius: $radius) {\n      id\n      name\n      slug\n      streetAddress\n      zipcode\n      city\n    }\n  }\n`\n","import React from 'react'\nimport { DirectionsRun, NearMe, Restaurant } from '@material-ui/icons'\n\nexport const venueMapLink = venue => {\n  const address = `${venue.streetAddress}, ${venue.city}, ${venue.state} ${venue.zipcode}`\n  return `https://maps.google.com/?q=${encodeURIComponent(address)}`\n}\n\nexport const venueIcon = (venue, cssClass) => {\n  let venueIconComponent\n\n  switch (venue.venueTypes[0].name) {\n    case 'restaurant':\n      venueIconComponent = <Restaurant className={cssClass} />\n      break\n    case 'outdoor playground':\n      venueIconComponent = <DirectionsRun className={cssClass} />\n      break\n    default:\n      venueIconComponent = <NearMe className={cssClass} />\n  }\n\n  return venueIconComponent\n}\n\nexport const venueHeaderImage = venue =>\n  venue.venueTypes[0].image || 'restaurant-header-cmp.jpg'\n\nexport const venuePrimaryTypeName = venue => venue.venueTypes[0].name || 'venue'\n\nexport const venueAddress = (venue, separator = ', ') => {\n  if (venue) {\n    return (\n      <span>\n        {venue.streetAddress}\n        {separator}\n        {venue.city}, {venue.state} {venue.zipcode}\n      </span>\n    )\n  }\n\n  return ''\n}\n","import gql from 'graphql-tag'\n\nexport const CREATE_VENUE_MUTATION = gql`\n  mutation CreateVenueMutation(\n    $name: String!\n    $streetAddress: String!\n    $zipcode: Int!\n    $cityId: Int!\n    $typeId: Int!\n  ) {\n    createVenue(\n      name: $name\n      streetAddress: $streetAddress\n      zipcode: $zipcode\n      city: { id: $cityId }\n      venueType: { id: $typeId }\n    ) {\n      id\n      name\n      streetAddress\n      venueTypes {\n        name\n      }\n    }\n  }\n`\n\nexport const CREATE_USER_VENUE_FAVORITE_MUTATION = gql`\n  mutation CreateUserVenueFavorite($venueId: Int!) {\n    createUserVenueFavorite(venueId: $venueId) {\n      favorites\n      favoriteByCurrentUser\n    }\n  }\n`\n\nexport const DELETE_USER_VENUE_FAVORITE_MUTATION = gql`\n  mutation DeleteUserVenueFavorite($venueId: Int!) {\n    deleteUserVenueFavorite(venueId: $venueId) {\n      favorites\n      favoriteByCurrentUser\n    }\n  }\n`\n","import React from 'react'\nimport { withStyles } from '@material-ui/core/styles'\nimport { Typography } from '@material-ui/core'\n\nimport { venueMapLink, venueIcon } from '../../utils/venueUtils'\nimport { Link as RouterLink } from 'react-router-dom'\nimport Routes from '../../routes'\nimport { useMutation } from '@apollo/react-hooks'\nimport { DELETE_USER_VENUE_FAVORITE_MUTATION } from '../../graphql/venueMutations'\nimport {\n  GET_VENUE_BY_SLUG,\n  GET_VENUES_FOR_CURRENT_USER\n} from '../../graphql/venueQueries'\n\nconst styles = {\n  '@global': {\n    '.venueItem': {\n      marginTop: '5px',\n      marginBottom: '5px',\n      backgroundColor: '#f6f6f6',\n      padding: '15px'\n    },\n    '.venueIcon': {\n      width: '15px',\n      height: 'auto',\n      marginRight: '5px',\n      position: 'relative',\n      top: '2px'\n    },\n    '.venueUnlike': {\n      float: 'right'\n    }\n  }\n}\n\nconst VenueListItem = props => {\n  const { venue, showDeleteFavoriteButton, onDeleteFavoriteCallback } = props\n\n  const [deleteFavorite] = useMutation(DELETE_USER_VENUE_FAVORITE_MUTATION, {\n    onError(error) {\n      console.log('error', error)\n    },\n    update: (store, { data: { deleteUserVenueFavorite } }) => {\n      updateFavoriteStats(store, deleteUserVenueFavorite)\n    },\n    onCompleted: () => {\n      onDeleteFavoriteCallback()\n    },\n    refetchQueries: [\n      {\n        query: GET_VENUES_FOR_CURRENT_USER\n      }\n    ],\n    awaitRefetchQueries: true\n  })\n\n  const updateFavoriteStats = (store, venueStats) => {\n    try {\n      let data = store.readQuery({\n        query: GET_VENUE_BY_SLUG,\n        variables: { venueSlug: venue.slug }\n      })\n\n      data.venueBySlug.venueStats = venueStats\n\n      store.writeQuery({\n        query: GET_VENUE_BY_SLUG,\n        variables: { venueSlug: venue.slug },\n        data\n      })\n    } catch (e) {}\n  }\n\n  const onDeleteFavorite = () =>\n    deleteFavorite({\n      variables: {\n        venueId: venue.id\n      }\n    })\n\n  return (\n    <div className=\"venueItem\">\n      {showDeleteFavoriteButton && (\n        <button\n          onClick={() => {\n            onDeleteFavorite()\n          }}\n          className=\"venueUnlike\"\n        >\n          Unlike\n        </button>\n      )}\n\n      <div>\n        <Typography\n          variant=\"h6\"\n          component={RouterLink}\n          to={Routes.venuePath(venue.slug)}\n        >\n          {venue.name}\n        </Typography>\n      </div>\n      <div>\n        {venueIcon(venue, 'venueIcon')}\n        {venue.venueTypes && venue.venueTypes.length\n          ? `${venue.venueTypes[0].name} in `\n          : ''}\n        <a href={venueMapLink(venue)} target=\"_blank\" rel=\"noopener noreferrer\">\n          {venue.city}, {venue.state}\n        </a>\n      </div>\n    </div>\n  )\n}\n\nexport default withStyles(styles)(VenueListItem)\n","import gql from \"graphql-tag\"\n\nexport const GET_CITIES = gql`\n\tquery ($limit: Int, $query: String) {\n\t\tcities(first: $limit, query: $query) {\n\t\t\tid\n\t\t\tname\n\t\t\tstate\n\t\t}\n\t}\n`","import React, { useState, useEffect } from 'react'\nimport Select from 'react-select'\nimport { GET_CITIES } from \"../../graphql/cityQueries\"\nimport { withApollo } from \"react-apollo\"\nimport InputLabel from \"@material-ui/core/InputLabel\"\nimport FormControl from \"@material-ui/core/FormControl\"\n\nconst style = {\n\tcontainer: {\n\t\tposition: 'relative',\n\t\twidth: '500px'\n\t},\n\tinput: {\n\t\tborder: '1px solid #ccc',\n\t\toutline: 'none',\n\t\twidth: '300px',\n\t\tpadding: '20px',\n\t\tfontSize: '17px',\n\t},\n\tsuggestionsContainer: {\n\t\tposition: 'absolute',\n\t\twidth: '300px',\n\t\ttop: 62,\n\t\tleft: 0,\n\t\tborder: '1px solid #efefef'\n\t},\n\tsuggestionItem: {\n\t\twidth: '100%',\n\t\tpadding: '10px'\n\t},\n\tformControl: {\n\t\tminWidth: '500px',\n\t\tmarginTop: '16px',\n\t\tmarginBottom: '8px',\n\t\theight: '16px'\n\t}\n}\n\nconst CityFormField = ({ client, onCitySelected }) => {\n\tconst [query, setQuery] = useState('')\n\tconst [selectedOption, setSelectedOption] = useState({})\n\tconst [options, setOptions] = useState([])\n\n\tuseEffect(\n\t\t() => {\n\t\t\tconst getSuggestions = (query) => {\n\t\t\t\treturn client.query({\n\t\t\t\t\tquery: GET_CITIES,\n\t\t\t\t\tvariables: { limit: 10, query },\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tif (query && query.length >= 3) {\n\t\t\t\tgetSuggestions(query).then(({ data }) => {\n\t\t\t\t\tsetOptions(data.cities.map(city => {\n\t\t\t\t\t\treturn {value: city.id, label: `${city.name}, ${city.state}`}\n\t\t\t\t\t}))\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tsetOptions([])\n\t\t\t}\n\t\t},\n\t\t[query, client],\n\t)\n\n\tconst handleInputChange = (text) => {\n\t\tsetQuery(text)\n\t}\n\n\tconst handleOptionChange = option => {\n\t\tsetSelectedOption(option)\n\t\tonCitySelected(option)\n\t}\n\n\tconst hasOptions = () => options && options.length\n\n\treturn (\n\t\t<div style={style.container}>\n\t\t\t<FormControl style={style.formControl}>\n\t\t\t\t<InputLabel shrink={true}\n\t\t\t\t\t\t\t\t\t\thtmlFor=\"age-simple\">City</InputLabel>\n\t\t\t</FormControl>\n\t\t\t<Select\n\t\t\t\tvalue={selectedOption}\n\t\t\t\tonChange={handleOptionChange}\n\t\t\t\toptions={options}\n\t\t\t\tonInputChange={handleInputChange}\n\t\t\t\tplaceholder=\"Type in name of city\"\n\t\t\t\tisClearable={true}\n\t\t\t\tmenuIsOpen={hasOptions()}\n\t\t\t\tescapeClearsValue={true}\n\t\t\t/>\n\n\t\t</div>\n\t)\n}\n\nexport default withApollo(CityFormField)","import React, { useState } from 'react'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport { Query } from 'react-apollo'\n\nimport { GET_VENUE_TYPES } from '../../graphql/venueQueries'\n\nconst style = {\n  formControl: {\n    minWidth: '500px',\n    marginTop: '16px',\n    marginBottom: '8px'\n  }\n}\n\nexport default ({ onVenueTypeSelected }) => {\n  const [selectedOption, setSelectedOption] = useState('')\n\n  const handleOptionChange = option => {\n    setSelectedOption(option)\n    onVenueTypeSelected(option)\n  }\n\n  return (\n    <Query query={GET_VENUE_TYPES}>\n      {({ loading, error, data }) => {\n        if (loading) return 'Loading...'\n        if (error) return `Error! ${error.message}`\n\n        const venueTypes = data.venueTypes\n\n        return (\n          <FormControl style={style.formControl}>\n            <InputLabel htmlFor=\"age-simple\">Venue Type</InputLabel>\n            <Select\n              value={selectedOption}\n              onChange={event => handleOptionChange(event.target.value)}\n              inputProps={{\n                name: 'type',\n                id: 'venue-type'\n              }}\n            >\n              {venueTypes.map(venueType => (\n                <MenuItem key={venueType.id} value={venueType.id}>\n                  {venueType.name}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        )\n      }}\n    </Query>\n  )\n}\n","import React, { useState } from 'react'\n\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport TextField from '@material-ui/core/TextField'\nimport NumberFormat from 'react-number-format'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport CloseIcon from '@material-ui/icons/Close'\nimport IconButton from '@material-ui/core/IconButton'\n\nimport CityFormField from './cityFormField'\nimport VenueTypeFormField from './venueTypeFormField'\nimport { CREATE_VENUE_MUTATION } from '../../graphql/venueMutations'\nimport Button from '@material-ui/core/Button'\n\nimport { validateVenue } from '../../utils/validationUtils'\n\nimport { useMutation } from '@apollo/react-hooks'\nimport { GET_VENUES_FOR_CURRENT_USER } from '../../graphql/venueQueries'\n\nconst USER_ACTION_TEXT = 'Please enter information about a venue'\nconst USER_ACTION_TEXT_ERROR = 'Please enter valid venue information'\n\nconst style = {\n  appBar: {\n    position: 'relative'\n  },\n  title: {\n    margin: '0 auto'\n  },\n  body: {\n    margin: '0 auto'\n  },\n  input: {\n    minWidth: '500px'\n  }\n}\n\nconst venueStub = {\n  name: '',\n  type: {\n    id: null\n  },\n  streetAddress: '',\n  zipcode: '',\n  lat: '',\n  lng: '',\n  city: {}\n}\n\nexport default props => {\n  const [addVenue] = useMutation(CREATE_VENUE_MUTATION, {\n    onError(error) {\n      console.log('error', error)\n    },\n    onCompleted(data) {\n      console.log('data', data)\n    },\n    refetchQueries: [\n      {\n        query: GET_VENUES_FOR_CURRENT_USER\n      }\n    ]\n  })\n\n  const [newVenue, setNewVenue] = useState({ ...venueStub })\n  const [userActionText, setUserActionText] = useState(USER_ACTION_TEXT)\n\n  const onCitySelected = city => {\n    console.log('city selected:', city)\n    setNewVenue({ ...newVenue, city: { id: city.value } })\n  }\n\n  const onVenueTypeSelected = venueTypeId => {\n    console.log('venueTypeId selected:', venueTypeId)\n    setNewVenue({ ...newVenue, type: { id: venueTypeId } })\n  }\n\n  const handleChange = name => event => {\n    console.log(name, event.target.value)\n    setNewVenue({ ...newVenue, [name]: event.target.value })\n  }\n\n  const onSubmit = () => {\n    if (validateVenue(newVenue)) {\n      addVenue({\n        variables: {\n          name: newVenue.name,\n          typeId: newVenue.type.id,\n          streetAddress: newVenue.streetAddress,\n          zipcode: parseInt(newVenue.zipcode),\n          cityId: newVenue.city.id\n        }\n      }).then(response => {\n        console.log('response', response)\n\n        setNewVenue({ ...venueStub })\n\n        props.toggleDialog()\n      })\n    } else {\n      setUserActionText(USER_ACTION_TEXT_ERROR)\n    }\n  }\n\n  return (\n    <Dialog\n      open={props.open}\n      onClose={props.toggleDialog}\n      fullScreen={true}\n      aria-labelledby=\"form-dialog-title\"\n    >\n      <AppBar style={style.appBar}>\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            onClick={props.toggleDialog}\n            aria-label=\"close\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <DialogTitle style={style.title}>Add New Destination</DialogTitle>\n      <DialogContent style={style.body}>\n        <DialogContentText>{userActionText}</DialogContentText>\n        <TextField\n          id=\"venue-name\"\n          label=\"Venue name\"\n          value={newVenue.name}\n          onChange={handleChange('name')}\n          margin=\"normal\"\n          style={style.input}\n        />\n        <br />\n        <VenueTypeFormField onVenueTypeSelected={onVenueTypeSelected} />\n        <br />\n        <TextField\n          id=\"venue-street-address\"\n          name=\"street-address\"\n          label=\"Street address\"\n          value={newVenue.streetAddress}\n          onChange={handleChange('streetAddress')}\n          margin=\"normal\"\n          autoComplete=\"shipping street-address\"\n          style={style.input}\n        />\n        <CityFormField onCitySelected={onCitySelected} />\n\n        <NumberFormat\n          customInput={TextField}\n          id=\"venue-zipcode\"\n          name=\"zipcode\"\n          label=\"Zipcode\"\n          value={newVenue.zipcode}\n          onChange={handleChange('zipcode')}\n          margin=\"normal\"\n          style={style.input}\n          autoComplete=\"postal-code\"\n          format=\"#####\"\n        />\n        <div>\n          <Button color=\"primary\" onClick={onSubmit}>\n            Create venue\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}\n","export const validateVenue = ({ name, type, streetAddress, city, zipcode }) => {\n\tlet valid = {\n\t\tname: false,\n\t\ttype: false,\n\t\tstreetAddress: false,\n\t\tcity: false,\n\t\tzipcode: false\n\t}\n\n\tif (name && name.length >= 2) {\n\t\tvalid.name = true\n\t}\n\n\tif(type && type.id) {\n\t\tvalid.type = true\n\t}\n\n\tif(streetAddress && streetAddress.length >= 2) {\n\t\tvalid.streetAddress = true\n\t}\n\n\tif(city && city.id) {\n\t\tvalid.city = true\n\t}\n\n\tif(zipcode && !isNaN(parseInt(zipcode))) {\n\t\tvalid.zipcode = true\n\t}\n\n\treturn (Object.values(valid).indexOf(false) === -1)\n}","import React from 'react'\nimport AppBar from \"@material-ui/core/AppBar/AppBar\"\nimport Tabs from \"@material-ui/core/Tabs\"\nimport Tab from \"@material-ui/core/Tab\"\nimport { withStyles } from \"@material-ui/core\"\n\nconst styles = {\n\tappBar: {\n\t\tboxShadow: \"none\",\n\t\tfloat: \"left\",\n\t\twidth: '300px',\n\t},\n\ttabIndicator: {\n\t\tbackgroundColor: '#ffffff',\n\t},\n}\n\nconst VenueTypeTabs = ({ classes, venues, venueTypeFilter, onSetVenueTypeFilter }) => {\n\tconst handleVenueTypeClick = (e, value) => {\n\t\tonSetVenueTypeFilter(value)\n\t}\n\n\tconst getVenueTypes = venues => {\n\t\tlet results = {}\n\n\t\tfor (let x = 0; x < venues.length; x++) {\n\t\t\tif ((venues[x].venueTypes && venues[x].venueTypes.length)) {\n\t\t\t\tif (results[venues[x].venueTypes[0].name]) {\n\t\t\t\t\tresults[venues[x].venueTypes[0].name].venues.push(venues[x])\n\t\t\t\t} else {\n\t\t\t\t\tresults[venues[x].venueTypes[0].name] = {\n\t\t\t\t\t\ttype: {\n\t\t\t\t\t\t\tid: venues[x].venueTypes[0].id,\n\t\t\t\t\t\t\tname: venues[x].venueTypes[0].name,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tvenues: [venues[x]],\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn Object.keys(results)\n\t}\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<AppBar position=\"static\" className={classes.appBar}>\n\t\t\t\t<Tabs value={venueTypeFilter}\n\t\t\t\t\t\t\tonChange={handleVenueTypeClick}\n\t\t\t\t\t\t\tclasses={{ indicator: classes.tabIndicator }}\n\t\t\t\t\t\t\torientation=\"vertical\"\n\t\t\t\t\t\t\tvariant=\"scrollable\"\n\t\t\t\t\t\t\tscrollButtons=\"auto\">\n\t\t\t\t\t<Tab label='all' value='all'/>\n\t\t\t\t\t{getVenueTypes(venues).sort().map((type, index) => (\n\t\t\t\t\t\t<Tab label={type} value={type} key={index}/>\n\t\t\t\t\t))}\n\t\t\t\t</Tabs>\n\t\t\t</AppBar>\n\t\t</React.Fragment>\n\t)\n}\n\nexport default withStyles(styles)(VenueTypeTabs)","import React, { useEffect, useState } from 'react'\nimport { withApollo } from 'react-apollo'\nimport { withStyles } from '@material-ui/core/styles'\nimport { Link as RouterLink } from 'react-router-dom'\nimport Button from '@material-ui/core/Button'\nimport { Add } from '@material-ui/icons'\nimport { GET_VENUES_FOR_CURRENT_USER } from '../graphql/venueQueries'\nimport Routes from '../routes'\n\nimport VenueListItem from './dashboard/venueListItem'\nimport AddVenueDialog from './dashboard/addVenueDialog'\nimport VenueTypeTabs from './dashboard/venueTypeTabs'\n\nconst DASHBOARD_SECTION = {\n  FOLLOWED_DESTINATIONS: 'followed-destinations',\n  MY_DESTINATIONS: 'my-destinations',\n  FAVORITES: 'favorites'\n}\n\nconst styles = {\n  '@global': {\n    '.sectionHeader': {\n      marginBottom: '15px',\n      display: 'flex'\n    },\n    '.sectionHeaderTitle': {\n      flexGrow: 2,\n      maxWidth: '250px',\n      margin: 0,\n      fontSize: '1.5rem',\n      fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n      fontWeight: 400,\n      lineHeight: 1.334,\n      letterSpacing: '0em',\n      cursor: 'pointer',\n      textDecoration: 'none',\n      color: '#111'\n    },\n    '.sectionHeaderTitleSelected': {\n      textDecoration: 'underline'\n    },\n    '.venueList': {\n      marginLeft: '320px'\n    }\n  }\n}\n\nconst DashboardPage = ({ client, match }) => {\n  const currentDashboardSection = Routes.validatePageSection(\n    match.params.section,\n    DASHBOARD_SECTION,\n    DASHBOARD_SECTION.MY_DESTINATIONS\n  )\n\n  const [dialogOpen, setDialogOpen] = useState(false)\n  const [venueTypeFilter, setVenueTypeFilter] = useState('all')\n  const [venues, setVenues] = useState([])\n\n  useEffect(() => {\n    getVenueData()\n  }, [client, match])\n\n  const getVenueData = () => {\n    client\n      .query({\n        query: GET_VENUES_FOR_CURRENT_USER\n      })\n      .then(({ data }) => {\n        setVenues(\n          currentDashboardSection === DASHBOARD_SECTION.FAVORITES\n            ? data.me.favoriteVenues\n            : data.me.venues\n        )\n      })\n  }\n\n  const toggleDialog = () => {\n    setDialogOpen(!dialogOpen)\n  }\n\n  const onDeleteFavorite = () => {\n    getVenueData()\n  }\n\n  const renderVenueGroupHeader = (text, dashboardSection) => {\n    return (\n      <RouterLink\n        to={Routes.dashboardPath(dashboardSection)}\n        className={`sectionHeaderTitle ${\n          currentDashboardSection === dashboardSection\n            ? 'sectionHeaderTitleSelected'\n            : ''\n        }`}\n      >\n        {text}\n      </RouterLink>\n    )\n  }\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"mainContent\">\n        <div className=\"sectionHeader\">\n          {renderVenueGroupHeader(\n            'My destinations',\n            DASHBOARD_SECTION.MY_DESTINATIONS\n          )}\n          {renderVenueGroupHeader(\n            'Favorite destinations',\n            DASHBOARD_SECTION.FAVORITES\n          )}\n          <Button\n            variant=\"outlined\"\n            style={{ marginLeft: 'auto' }}\n            onClick={toggleDialog}\n          >\n            <Add />\n            Add Destination\n          </Button>\n          <AddVenueDialog open={dialogOpen} toggleDialog={toggleDialog} />\n        </div>\n        <VenueTypeTabs\n          venues={venues}\n          onSetVenueTypeFilter={setVenueTypeFilter}\n          venueTypeFilter={venueTypeFilter}\n        ></VenueTypeTabs>\n        <div className=\"venueList\">\n          {venues\n            .filter(\n              venue =>\n                venueTypeFilter === 'all' ||\n                venue.venueTypes[0].name === venueTypeFilter\n            )\n            .map(venue => (\n              <VenueListItem\n                key={venue.id}\n                venue={venue}\n                showDeleteFavoriteButton={\n                  currentDashboardSection === DASHBOARD_SECTION.FAVORITES\n                }\n                onDeleteFavoriteCallback={onDeleteFavorite}\n              />\n            ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default withStyles(styles)(withApollo(DashboardPage))\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport { headerStyles } from '../../utils/styleUtils'\nimport { venueHeaderImage } from '../../utils/venueUtils'\n\nexport default props => {\n  const { venue } = props\n  const headerStyle = headerStyles(venueHeaderImage(venue), '300px')\n\n  return (\n    <div style={headerStyle.container}>\n      <Typography variant=\"h2\" style={headerStyle.headerText}>\n        <strong>{venue.name}</strong>\n      </Typography>\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { withApollo } from 'react-apollo'\nimport { GET_SIMILAR_VENUES_IN_RADIUS } from '../../graphql/venueQueries'\nimport '../shared/sidebarModule.css'\nimport { Link as RouterLink } from 'react-router-dom'\nimport Routes from '../../routes'\n\nconst SimilarVenues = ({ client, venue }) => {\n  const [similarVenues, setSimilarVenues] = useState([])\n  useEffect(() => {\n    client\n      .query({\n        query: GET_SIMILAR_VENUES_IN_RADIUS,\n        variables: { venueId: venue.id, limit: 5, radius: 10 }\n      })\n      .then(({ data }) => {\n        setSimilarVenues(data.similarVenues)\n      })\n  }, [venue, client])\n\n  return (\n    <div className=\"sidebar-module\">\n      <h3>Similar places near by</h3>\n      <div className=\"sidebar-module-body\">\n        {similarVenues &&\n          similarVenues.map(venue => (\n            <div key={venue.id}>\n              <RouterLink to={Routes.venuePath(venue.slug)}>\n                {venue.name}\n              </RouterLink>\n            </div>\n          ))}\n      </div>\n    </div>\n  )\n}\n\nexport default withApollo(SimilarVenues)\n","import React from 'react'\nimport '../shared/sidebarModule.css'\nimport { venueAddress } from '../../utils/venueUtils'\n\nconst LocationInfo = ({ venue }) => {\n  return (\n    <div className=\"sidebar-module\">\n      <h3>Location</h3>\n      <div className=\"sidebar-module-body\">{venueAddress(venue, <br />)}</div>\n    </div>\n  )\n}\n\nexport default LocationInfo\n","import React from 'react'\nimport { useMutation } from '@apollo/react-hooks'\nimport {\n  CREATE_USER_VENUE_FAVORITE_MUTATION,\n  DELETE_USER_VENUE_FAVORITE_MUTATION\n} from '../../graphql/venueMutations'\nimport {\n  GET_VENUE_BY_SLUG,\n  GET_VENUES_FOR_CURRENT_USER\n} from '../../graphql/venueQueries'\n\nexport default ({\n  venueId,\n  venueSlug,\n  favoriteByCurrentUser,\n  onUpdateFavoritesStats\n}) => {\n  const refetchQueries = [\n    {\n      query: GET_VENUES_FOR_CURRENT_USER\n    }\n  ]\n\n  const updateFavoriteStats = (store, venueStats) => {\n    let data = store.readQuery({\n      query: GET_VENUE_BY_SLUG,\n      variables: { venueSlug }\n    })\n\n    data.venueBySlug.venueStats = venueStats\n    onUpdateFavoritesStats(venueStats)\n\n    store.writeQuery({\n      query: GET_VENUE_BY_SLUG,\n      variables: { venueSlug },\n      data\n    })\n  }\n\n  const [addFavorite] = useMutation(CREATE_USER_VENUE_FAVORITE_MUTATION, {\n    onError(error) {\n      console.log('error', error)\n    },\n    update: (store, { data: { createUserVenueFavorite } }) => {\n      updateFavoriteStats(store, createUserVenueFavorite)\n    },\n    refetchQueries\n  })\n\n  const [deleteFavorite] = useMutation(DELETE_USER_VENUE_FAVORITE_MUTATION, {\n    onError(error) {\n      console.log('error', error)\n    },\n    update: (store, { data: { deleteUserVenueFavorite } }) => {\n      updateFavoriteStats(store, deleteUserVenueFavorite)\n    },\n    refetchQueries\n  })\n\n  const onAddFavorite = () =>\n    addFavorite({\n      variables: {\n        venueId: venueId\n      }\n    })\n\n  const onDeleteFavorite = () =>\n    deleteFavorite({\n      variables: {\n        venueId: venueId\n      }\n    })\n\n  return (\n    <React.Fragment>\n      {favoriteByCurrentUser ? (\n        <span>\n          &#9733;&nbsp;\n          <a\n            href=\"#\"\n            onClick={e => {\n              e.preventDefault()\n              onDeleteFavorite()\n            }}\n          >\n            Unlike\n          </a>\n        </span>\n      ) : (\n        <a\n          href=\"#\"\n          onClick={e => {\n            e.preventDefault()\n            onAddFavorite()\n          }}\n        >\n          Like\n        </a>\n      )}\n    </React.Fragment>\n  )\n}\n","import React, { useState } from 'react'\nimport { Query } from 'react-apollo'\nimport Typography from '@material-ui/core/Typography'\nimport NumberFormat from 'react-number-format'\nimport pluralize from 'pluralize'\nimport { GET_VENUE_BY_SLUG } from '../graphql/venueQueries'\n\nimport VenueHeader from './venue/header'\nimport SimilarVenues from './venue/similarVenues'\nimport { venuePrimaryTypeName } from '../utils/venueUtils'\nimport { isUserLoggedIn } from '../utils/userUtils'\nimport LocationInfo from './venue/locationInfo'\nimport FavoriteButton from './venue/favoriteButton'\n\nconst pageStyle = {\n  sectionHeader: {\n    marginBottom: '15px'\n  },\n  columnWrapper: {\n    display: 'flex'\n  },\n  mainColumn: {\n    flexGrow: 3,\n    maxWidth: '800px'\n  },\n  sideColumm: {\n    flexGrow: 1,\n    marginTop: '-20px'\n  }\n}\n\nexport default ({ match }) => {\n  const venueSlug = match.params.venueSlug\n  const [venue, setVenue] = useState(null)\n  const [venueTypeName, setVenueTypeName] = useState('')\n\n  const onUpdateFavoritesStats = venueStats => {\n    setVenue({ ...venue, venueStats: { ...venueStats } })\n  }\n\n  if (!venueSlug) {\n    return <div>Venue not found.</div>\n  } else {\n    return (\n      <Query query={GET_VENUE_BY_SLUG} variables={{ venueSlug }}>\n        {({ loading, error, data }) => {\n          if (loading) return 'Loading...'\n          if (error) return `Error! ${error.message}`\n\n          setVenue(data.venueBySlug)\n          setVenueTypeName(venuePrimaryTypeName(data.venueBySlug))\n\n          return (\n            venue && (\n              <div>\n                <VenueHeader venue={venue} />\n                <div className=\"mainContainer\">\n                  <div className=\"mainContent\">\n                    <Typography variant=\"h5\" style={pageStyle.sectionHeader}>\n                      {venue.name}\n                    </Typography>\n                    <div style={pageStyle.columnWrapper}>\n                      <div style={pageStyle.mainColumn}>\n                        <div>\n                          Liked by{' '}\n                          <strong>\n                            <NumberFormat\n                              value={venue.venueStats.favorites}\n                              thousandSeparator={true}\n                              displayType={'text'}\n                            />{' '}\n                            {pluralize('person', venue.venueStats.favorites)}\n                          </strong>\n                          . &nbsp;\n                          {isUserLoggedIn() && (\n                            <FavoriteButton\n                              venueId={venue.id}\n                              venueSlug={venueSlug}\n                              favoriteByCurrentUser={\n                                venue.venueStats.favoriteByCurrentUser\n                              }\n                              onUpdateFavoritesStats={onUpdateFavoritesStats}\n                            />\n                          )}\n                        </div>\n                        <br />\n                        {venue.description && <span>{venue.description}</span>}\n                        This {venueTypeName} is located in {venue.city},{' '}\n                        {venue.state}.\n                      </div>\n                      <div style={pageStyle.sideColumm}>\n                        <LocationInfo venue={venue} />\n                        <SimilarVenues venue={venue} />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )\n          )\n        }}\n      </Query>\n    )\n  }\n}\n","import { createMuiTheme } from '@material-ui/core/styles'\nimport blue from '@material-ui/core/colors/blue'\n\nexport default createMuiTheme({\n\t\tpalette: {\n\t\t\tprimary: {\n\t\t\t\tmain: blue[500],\n\t\t\t},\n\t\t\tbackground: { default: '#ffffff'},\n\t\t},\n\t\ttypography: {\n\t\t\tuseNextVariants: true,\n\t\t},\n\t},\n)","import gql from \"graphql-tag\"\n\nexport const SIGNUP_MUTATION = gql`\n    mutation SignupMutation($email: String!, $password: String!, $firstName: String!, $lastName: String!) {\n        signup(email: $email, password: $password, firstName: $firstName, lastName: $lastName) {\n            token,\n            user {\n                id,\n                firstName,\n                lastName,\n                email\n            }\n        }\n    }\n`\n\nexport const LOGIN_MUTATION = gql`\n    mutation LoginMutation($email: String!, $password: String!) {\n        login(email: $email, password: $password) {\n            token,\n            user {\n                id,\n                firstName,\n                lastName,\n                email\n            }\n        }\n    }\n`","import React, { Component } from 'react'\nimport { withRouter } from 'react-router'\n\nimport { setUserInfo } from '../../utils/userUtils'\nimport Routes from '../../routes'\nimport { Mutation } from 'react-apollo'\nimport { SIGNUP_MUTATION, LOGIN_MUTATION } from '../../graphql/userMutations'\n\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\n\nimport { withStyles } from '@material-ui/core/styles'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\n\nconst styles = {\n  dialogMainContent: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column'\n  },\n  dialogMainError: {\n    textAlign: 'center'\n  }\n}\n\nclass LoginDialog extends Component {\n  state = {\n    login: this.props.login !== undefined ? this.props.login : true, // switch between Login and SignUp\n    email: '',\n    password: '',\n    firstName: '',\n    lastName: '',\n    errorMessage: null\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.open !== this.props.open) {\n      this.setState({ errorMessage: null })\n    }\n\n    if (prevProps.login !== this.props.login) {\n      this.setState({ login: this.props.login })\n    }\n  }\n\n  render() {\n    const {\n      login,\n      email,\n      password,\n      firstName,\n      lastName,\n      errorMessage\n    } = this.state\n    const { classes } = this.props\n    return (\n      <Dialog\n        open={this.props.open}\n        onClose={this.props.toggleDialog}\n        maxWidth=\"sm\"\n        fullWidth={true}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"login-dialog-title\">\n          {login ? 'Login' : 'Sign Up'}\n        </DialogTitle>\n        <DialogContent>\n          {errorMessage && (\n            <DialogContentText className={classes.dialogMainError}>\n              {errorMessage}\n            </DialogContentText>\n          )}\n          <div className={classes.dialogMainContent}>\n            {!login && (\n              <span>\n                <TextField\n                  id=\"firstName\"\n                  label=\"First name\"\n                  error={!!errorMessage}\n                  value={firstName}\n                  onChange={e => this.setState({ firstName: e.target.value })}\n                  margin=\"normal\"\n                  fullWidth\n                />\n                <TextField\n                  id=\"lastName\"\n                  label=\"Last name\"\n                  error={!!errorMessage}\n                  value={lastName}\n                  onChange={e => this.setState({ lastName: e.target.value })}\n                  margin=\"normal\"\n                  fullWidth\n                />\n              </span>\n            )}\n            <TextField\n              id=\"email\"\n              label=\"Email\"\n              error={!!errorMessage}\n              value={email}\n              onChange={e => this.setState({ email: e.target.value })}\n              margin=\"normal\"\n              fullWidth\n            />\n            <TextField\n              id=\"password\"\n              label=\"Password\"\n              error={!!errorMessage}\n              type=\"password\"\n              autoComplete=\"current-password\"\n              onChange={e => this.setState({ password: e.target.value })}\n              margin=\"normal\"\n              fullWidth\n            />\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={() => this.setState({ login: !login, errorMessage: null })}\n            color=\"primary\"\n            style={{ marginRight: 'auto' }}\n          >\n            {login ? 'need to create an account?' : 'already have an account?'}\n          </Button>\n\n          <Button onClick={this.props.toggleDialog} color=\"primary\">\n            Cancel\n          </Button>\n          <Mutation\n            mutation={login ? LOGIN_MUTATION : SIGNUP_MUTATION}\n            variables={{ email, password, firstName, lastName }}\n            update={(cache, { data }) =>\n              this._update(cache, login ? data.login : data.signup)\n            }\n            onCompleted={data => this._confirm(data)}\n            onError={error => this._error(error)}\n          >\n            {mutation => (\n              <Button color=\"primary\" onClick={mutation}>\n                {login ? 'login' : 'create account'}\n              </Button>\n            )}\n          </Mutation>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  _update = async (cache, info) => {\n    cache.writeData({\n      data: {\n        currentUser: {\n          ...info.user,\n          token: info.token\n        }\n      }\n    })\n  }\n\n  _confirm = async data => {\n    this.state.error = null\n\n    const { token, user } = this.state.login ? data.login : data.signup\n    this._saveUserData(token, user)\n\n    document.location = Routes.dashboard\n  }\n\n  _saveUserData = (token, user) => {\n    setUserInfo(token, user)\n  }\n\n  _error = async ({ graphQLErrors }) => {\n    if (\n      this.state.login &&\n      graphQLErrors &&\n      graphQLErrors[0] &&\n      graphQLErrors[0].message\n    ) {\n      this.setState({ errorMessage: graphQLErrors[0].message })\n    } else if (\n      graphQLErrors &&\n      graphQLErrors[0] &&\n      graphQLErrors[0].extensions.exception.errors[0].message\n    ) {\n      this.setState({\n        errorMessage: graphQLErrors[0].extensions.exception.errors[0].message\n      })\n    }\n  }\n}\n\nexport default withRouter(withStyles(styles)(LoginDialog))\n","import React, { Component } from 'react'\nimport Button from '@material-ui/core/Button'\nimport { withRouter } from 'react-router'\nimport {\n  isUserLoggedIn,\n  withCurrentUser,\n  listenForOpenSignUpDialog\n} from '../../utils/userUtils'\nimport LoginDialog from './loginDialog'\nimport Typography from '@material-ui/core/Typography'\n\nclass LoginButton extends Component {\n  state = {\n    dialogOpen: false,\n    login: true\n  }\n\n  componentDidMount() {\n    listenForOpenSignUpDialog(() => {\n      this.setState({ dialogOpen: true, login: false })\n    })\n  }\n\n  toggleDialog = () => {\n    this.setState({ dialogOpen: !this.state.dialogOpen, login: true })\n  }\n\n  renderUserInfo = currentUser => {\n    if (currentUser && currentUser.id) {\n      return `Welcome, ${currentUser.firstName}`\n    } else {\n      return ''\n    }\n  }\n\n  render() {\n    const { currentUser } = this.props\n\n    return isUserLoggedIn() ? (\n      <Typography\n        variant=\"button\"\n        color=\"inherit\"\n        className={this.props.className}\n      >\n        {this.renderUserInfo(currentUser)}\n      </Typography>\n    ) : (\n      <span>\n        <Button\n          onClick={this.toggleDialog}\n          className={this.props.className}\n          color=\"inherit\"\n        >\n          Login\n        </Button>\n        <LoginDialog\n          open={this.state.dialogOpen}\n          login={this.state.login}\n          toggleDialog={this.toggleDialog}\n        />\n      </span>\n    )\n  }\n}\n\nexport default withCurrentUser(withRouter(LoginButton))\n","import React, { Component } from 'react'\nimport { Link as RouterLink } from 'react-router-dom'\n\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport IconButton from '@material-ui/core/IconButton'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport Menu from '@material-ui/core/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\n\nimport LoginButton from '../components/shared/loginButton'\nimport { logoutUser, isUserLoggedIn } from '../utils/userUtils'\nimport { withRouter } from 'react-router'\n\nimport Routes from '../routes'\n\nclass ButtonAppBar extends Component {\n  state = {\n    anchorEl: null\n  }\n\n  toggleMenu = event => {\n    this.state.anchorEl\n      ? this.setState({ anchorEl: null })\n      : this.setState({ anchorEl: event.currentTarget })\n  }\n\n  render() {\n    const { classes } = this.props\n\n    return (\n      <div className={classes.root}>\n        <AppBar\n          position=\"fixed\"\n          style={{ background: 'transparent', boxShadow: 'none' }}\n        >\n          <Toolbar variant=\"dense\" className={classes.container}>\n            <Typography\n              className={classes.logoText}\n              variant=\"button\"\n              color=\"inherit\"\n            >\n              KidTrip\n            </Typography>\n            <Typography\n              variant=\"h6\"\n              color=\"inherit\"\n              className={classes.grow}\n            ></Typography>\n            <LoginButton className={classes.loginButton} />\n\n            {isUserLoggedIn() && (\n              <span className={classes.menuWrapper}>\n                <IconButton\n                  onClick={this.toggleMenu}\n                  className={classes.menuButton}\n                  color=\"inherit\"\n                  aria-label=\"Menu\"\n                >\n                  <MenuIcon />\n                </IconButton>\n                <Menu\n                  id=\"simple-menu\"\n                  anchorEl={this.state.anchorEl}\n                  open={Boolean(this.state.anchorEl)}\n                  onClose={this.toggleMenu}\n                >\n                  <MenuItem\n                    component={RouterLink}\n                    to={Routes.home}\n                    onClick={this.toggleMenu}\n                  >\n                    Home\n                  </MenuItem>\n                  <MenuItem\n                    component={RouterLink}\n                    to={Routes.dashboard}\n                    onClick={this.toggleMenu}\n                  >\n                    Dashboard\n                  </MenuItem>\n                  <MenuItem onClick={this.toggleMenu}>My account</MenuItem>\n                  <MenuItem\n                    onClick={() => {\n                      logoutUser()\n                      this.props.history.push(`/`)\n                    }}\n                  >\n                    Logout\n                  </MenuItem>\n                </Menu>\n              </span>\n            )}\n          </Toolbar>\n        </AppBar>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(ButtonAppBar)\n","import React from 'react'\nimport { isHomepage } from '../utils/routeUtils'\nimport { withStyles } from '@material-ui/core/styles'\nimport { withRouter } from 'react-router'\nimport blueGrey from '@material-ui/core/colors/blueGrey'\n\nimport AppBar from './appBar'\n\nconst styles = {\n  root: {\n    flexGrow: 1\n  },\n  grow: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20\n  },\n  menuWrapper: {\n    marginLeft: 15\n  }\n}\n\nconst nonHomepageStyles = {\n  ...styles,\n  container: {\n    borderBottom: '1px solid',\n    borderBottomColor: blueGrey[100],\n    backgroundColor: 'white'\n  },\n  grow: {\n    ...styles.grow,\n    color: blueGrey[500]\n  },\n  menuButton: {\n    ...styles.menuButton,\n    color: blueGrey[500]\n  },\n  loginButton: {\n    color: blueGrey[500]\n  },\n  logoText: {\n    color: blueGrey[500]\n  }\n}\n\nconst AppBarContainer = props => {\n  const currentStyles = isHomepage(props.location) ? styles : nonHomepageStyles\n  const AppBarWithStyles = withStyles(currentStyles)(AppBar)\n  return <AppBarWithStyles />\n}\n\nexport default withRouter(AppBarContainer)\n","import React, { Component } from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport { withRouter } from 'react-router'\nimport Routes from './routes'\nimport { isHomepage } from './utils/routeUtils'\n\nimport HomePage from './components/homePage'\nimport DashboardPage from './components/dashboardPage'\nimport VenuePage from './components/venuePage'\n\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { MuiThemeProvider, withStyles } from '@material-ui/core/styles'\nimport theme from './theme'\nimport AppBar from './layout/appBarContainer'\n\nconst styles = {\n  '@global': {\n    body: {\n      fontFamily: 'Roboto, Helvetica, Arial, sans-serif'\n    },\n    '.mainContainer': {\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    '.mainContent': {\n      maxWidth: '1200px',\n      flexGrow: '1',\n      margin: '50px'\n    }\n  },\n  appBarSpacer: {\n    height: '49px'\n  }\n}\n\nclass App extends Component {\n  render() {\n    const { classes, location } = this.props\n\n    return (\n      <MuiThemeProvider theme={theme}>\n        <div>\n          <CssBaseline />\n          <AppBar />\n          {!isHomepage(location) && (\n            <div className={classes.appBarSpacer}></div>\n          )}\n          <Switch>\n            <Route exact path={Routes.home} component={HomePage} />\n            <Route path={Routes.dashboard} component={DashboardPage} />\n            <Route path={Routes.venue} component={VenuePage} />\n          </Switch>\n        </div>\n      </MuiThemeProvider>\n    )\n  }\n}\n\nexport default withRouter(withStyles(styles)(App))\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { HttpLink } from 'apollo-link-http'\nimport { onError } from 'apollo-link-error'\nimport { ApolloLink } from 'apollo-link'\nimport { ApolloProvider } from 'react-apollo'\nimport { withClientState } from 'apollo-link-state'\n\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { BrowserRouter } from 'react-router-dom'\nimport 'typeface-roboto'\nimport { getUserInfoFromStorage } from './utils/userUtils'\nimport { AUTH_TOKEN } from './constants'\n\nconst SERVER_HOST = process.env.REACT_APP_SERVER_HOST\n\nconst cache = new InMemoryCache()\n\nconst defaultState = {\n  currentUser: { ...getUserInfoFromStorage() }\n}\n\nconst stateLink = withClientState({\n  cache,\n  defaults: defaultState,\n  resolvers: {\n    Mutation: {\n      updateUserInfo: (_, { id, firstName, lastName, email }, { cache }) => {\n        const data = {\n          user: {\n            __typename: 'User',\n            id,\n            firstName,\n            lastName,\n            email\n          }\n        }\n        cache.writeData({ data })\n        return null\n      }\n    }\n  }\n})\n\nconst token = localStorage.getItem(AUTH_TOKEN)\nconst httpLink = new HttpLink({\n  uri: SERVER_HOST, // || 'http://localhost:4000',\n  credentials: 'same-origin',\n  headers: {\n    authorization: token ? `Bearer ${token}` : ''\n  }\n})\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    onError(({ graphQLErrors, networkError }) => {\n      if (graphQLErrors)\n        graphQLErrors.map(({ message, locations, path }) =>\n          console.log(\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n          )\n        )\n      if (networkError) console.log(`[Network error]: ${networkError}`)\n    }),\n    stateLink,\n    httpLink\n  ]),\n  cache: new InMemoryCache(),\n  resolvers: {}\n})\n\nReactDOM.render(\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </BrowserRouter>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}