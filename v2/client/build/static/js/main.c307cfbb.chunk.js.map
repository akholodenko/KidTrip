{"version":3,"sources":["utils/routeUtils.js","routes.js","utils/styleUtils.js","components/homepage/header.js","utils/urlUtils.js","components/homepage/valueProp/valuePropSection.js","components/homepage/valueProp.js","constants.js","graphql/venueQueries.js","graphql/userQueries.js","utils/userUtils.js","components/homepage/signup.js","components/homePage.js","graphql/cityQueries.js","components/dashboard/cityFormField.js","components/dashboard/venueTypeFormField.js","graphql/venueMutations.js","components/dashboard/addVenueDialog.js","utils/validationUtils.js","components/dashboard/venueTypeTabs.js","utils/venueUtils.js","components/dashboard/venueListItem.js","components/dashboard/venueList.js","graphql/userMutations.js","components/dashboard/feedItem.js","utils/dateUtils.js","components/dashboard/venueTypeMultiFormField.js","components/dashboard/feedConfigurator.js","components/dashboard/feed.js","components/shared/withPageTemplate.js","components/dashboardPage.js","components/venue/header.js","components/venue/similarVenues.js","components/venue/locationInfo.js","components/venue/favoriteButton.js","components/venuePage.js","theme.js","components/shared/loginDialog.js","components/shared/loginButton.js","layout/appBar.js","layout/appBarContainer.js","components/userProfile/sideVenueWidget.js","components/userProfilePage.js","App.js","serviceWorker.js","index.js"],"names":["isHomepage","location","pathname","Routes","home","dashboard","dashboardPath","section","venue","venuePath","venueSlug","userProfile","userProfilePath","userId","btoa","encodeUserId","validatePageSection","options","fallback","Object","values","includes","headerStyles","imageUrl","height","container","display","justifyContent","alignItems","background","backgroundSize","headerText","color","headerStyle","process","Header","style","Typography","variant","ValuePropSection","props","title","icon","text","iconStyle","width","className","discoverContent","trackContent","shareContent","ValueProp","AUTH_TOKEN","USER_INFO","VenueDetails","gql","VenueStats","GET_VENUE_BY_SLUG","GET_VENUES_FOR_CURRENT_USER","GET_VENUE_TYPES","GET_SIMILAR_VENUES_IN_RADIUS","GET_FEED_VENUES","CURRENT_USER_QUERY","CURRENT_USER_FEED_CONFIG_QUERY","GET_USER_PROFILE_BY_PUBLIC_ID","isUserLoggedIn","localStorage","getItem","setUserInfo","token","user","setItem","JSON","stringify","SignUpSection","onClick","event","Event","window","dispatchEvent","openSignUpDialog","HomePage","GET_CITIES","position","formControl","minWidth","marginTop","marginBottom","CityFormField","onCitySelected","isMulti","fieldLabel","placeholder","containerWidth","containerDisplay","initialValue","client","useApolloClient","useState","query","setQuery","selectedOption","setSelectedOption","setOptions","useEffect","length","variables","limit","getSuggestions","then","data","cities","map","city","value","id","label","name","state","Array","isArray","FormControl","InputLabel","shrink","htmlFor","defaultValue","onChange","option","onInputChange","isClearable","menuIsOpen","escapeClearsValue","VenueTypeFormField","onVenueTypeSelected","useQuery","loading","error","message","Select","target","inputProps","venueTypes","venueType","MenuItem","key","CREATE_VENUE_MUTATION","CREATE_USER_VENUE_FAVORITE_MUTATION","DELETE_USER_VENUE_FAVORITE_MUTATION","appBar","margin","body","input","venueStub","type","streetAddress","zipcode","lat","lng","AddVenueDialog","open","toggleDialog","onCreatedVenue","useMutation","onError","console","log","onCompleted","refetchQueries","awaitRefetchQueries","addVenue","newVenue","setNewVenue","userActionText","setUserActionText","handleChange","Dialog","onClose","fullScreen","aria-labelledby","AppBar","Toolbar","IconButton","edge","aria-label","DialogTitle","DialogContent","DialogContentText","TextField","venueTypeId","autoComplete","customInput","format","Button","valid","isNaN","parseInt","indexOf","validateVenue","typeId","cityId","response","withStyles","boxShadow","float","tabIndicator","backgroundColor","classes","venues","venueTypeFilter","onSetVenueTypeFilter","Fragment","Tabs","e","indicator","orientation","scrollButtons","Tab","results","x","push","keys","getVenueTypes","sort","index","venueMapLink","address","encodeURIComponent","venueCityState","venueAddress","separator","border","borderRadius","padding","marginRight","fontSize","fontWeight","lineHeight","textDecoration","marginLeft","textTransform","textAlign","top","showDeleteFavoriteButton","onDeleteFavoriteCallback","update","store","deleteUserVenueFavorite","updateFavoriteStats","deleteFavorite","venueStats","readQuery","slug","venueBySlug","writeQuery","venueId","to","cssClass","venueIconComponent","Restaurant","Museum","Pets","DirectionsWalk","Nature","NaturePeople","DirectionsRun","NearMe","venueIcon","href","rel","currentDashboardSection","isFavoritesDashboardSection","externalTriggerVenueRefresh","setVenueTypeFilter","setVenues","triggerVenueRefresh","setTriggerVenueRefresh","me","favoriteVenues","onDeleteFavorite","filter","WrappedComponent","SIGNUP_MUTATION","LOGIN_MUTATION","UPDATE_CURRENT_USER_FEED_CONFIG_MUTATION","borderBottom","creator","timestamp","Date","diffSeconds","getTime","Math","round","toLocaleDateString","year","month","day","sinceCreated","createdAt","firstName","lastName","VenueTypeMultiFormField","defaultVenueTypeIds","split","isSearchable","FeedConfigurator","feedConfiguration","onFeedConfigurationUpdated","cityIds","setCityIds","venueTypeIds","setVenueTypeIds","ids","join","cityDetails","maxWidth","feedVenues","setFeedVenues","first","init","setFeedConfiguration","updateCurrentUserFeedConfigMutation","userFeedConfig","newFeedConfiguration","withPageTemplate","this","React","Component","DASHBOARD_SECTION","FEED","FOLLOWED_DESTINATIONS","MY_DESTINATIONS","FAVORITES","flexGrow","cursor","letterSpacing","match","params","dialogOpen","setDialogOpen","setExternalTriggerVenueRefresh","renderDashboardSection","dashboardSection","Add","VenueHeader","image","venueHeaderImage","SimilarVenues","similarVenues","setSimilarVenues","radius","LocationInfo","FavoriteButton","favoriteByCurrentUser","onUpdateFavoritesStats","createUserVenueFavorite","addFavorite","preventDefault","pageStyle","sectionHeader","columnWrapper","mainColumn","sideColumm","VenuePage","setVenue","venueTypeName","setVenueTypeName","venuePrimaryTypeName","favorites","thousandSeparator","displayType","pluralize","description","createMuiTheme","palette","primary","main","blue","default","typography","useNextVariants","LoginDialog","login","undefined","email","password","errorMessage","_update","cache","info","a","currentUser","_confirm","signup","_saveUserData","document","_error","graphQLErrors","setState","extensions","exception","errors","prevProps","fullWidth","dialogMainError","dialogMainContent","DialogActions","mutation","withRouter","flexDirection","withCurrentUser","setLogin","callback","addEventListener","renderUserInfo","compose","graphql","ButtonAppBar","anchorEl","toggleMenu","currentTarget","root","logoText","grow","loginButton","menuWrapper","menuButton","Boolean","component","RouterLink","removeItem","history","styles","nonHomepageStyles","borderBottomColor","blueGrey","currentStyles","AppBarWithStyles","SideVenueWidget","publicId","setUserProfile","config","headerImageUrl","stats","created","favorited","recentAddedVenues","recentFavoriteVenues","App","theme","CssBaseline","appBarSpacer","exact","path","DashboardPage","UserProfilePage","fontFamily","hostname","httpLink","HttpLink","uri","credentials","headers","authorization","ApolloClient","link","ApolloLink","from","networkError","locations","InMemoryCache","resolvers","userInfo","parse","__typename","getUserInfoFromStorage","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c307cfbb.chunk.js","sourcesContent":["import Routes from '../routes'\n\nexport const isHomepage = location => location.pathname === Routes.home\n\nexport const encodeUserId = userId => btoa(userId * 999999999)\n\nexport const decodeUserId = encodedUserId => atob(encodedUserId) / 999999999\n","import { encodeUserId } from './utils/routeUtils'\n\nconst Routes = {\n  home: '/',\n  dashboard: '/dashboard/:section?',\n  dashboardPath: section => `/dashboard/${section}`,\n  venue: '/venue/:venueSlug',\n  venuePath: venueSlug => `/venue/${venueSlug}`,\n  userProfile: '/user/:userId',\n  userProfilePath: userId => `/user/${encodeUserId(userId)}`,\n  validatePageSection: (section, options, fallback) =>\n    Object.values(options).includes(section) ? section : fallback\n}\n\nexport default Routes\n","export const headerStyles = (imageUrl, height) => {\n  return {\n    container: {\n      display: 'flex',\n      // flexWrap: 'wrap',\n      // flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      background: `linear-gradient(rgba(0, 0, 0, 0.5),rgba(0, 0, 0, 0.5)),url(${imageUrl}) 50% 50% no-repeat`,\n      backgroundSize: 'cover',\n      height: height\n    },\n    headerText: {\n      color: '#ffffff'\n    }\n  }\n}\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport { headerStyles } from '../../utils/styleUtils'\nimport { S3_ASSETS_URL } from '../../utils/urlUtils'\n\nconst headerStyle = headerStyles(\n  `${S3_ASSETS_URL}venue-header-backgrounds/family-biking-cmp.jpg`,\n  '700px'\n)\n\nconst Header = () => {\n  return (\n    <div style={headerStyle.container}>\n      <Typography variant=\"h2\" style={headerStyle.headerText}>\n        <strong>Experience</strong> childhood, again.\n      </Typography>\n    </div>\n  )\n}\n\nexport default Header\n","export const GOOGLE_DIRECTIONS_URL = 'https://maps.google.com/?daddr='\n\nexport const S3_ASSETS_URL = process.env.REACT_APP_S3_ASSETS_URL\n","import React from 'react'\n\nimport './valuePropSection.css'\n\nconst ValuePropSection = props => {\n  const { title, icon, text } = props\n  const iconStyle = {\n    background: `url(/images/icons/${icon}.png) 0% 0% / 60px 60px no-repeat`,\n    width: '60px',\n    height: '60px'\n  }\n\n  return (\n    <div className=\"value-prop-section\">\n      <div className=\"value-prop-title\">{title}</div>\n      <div className=\"value-prop-icon\" style={iconStyle}></div>\n      <div className=\"value-prop-text\">{text}</div>\n    </div>\n  )\n}\n\nexport default ValuePropSection\n","import React from 'react'\n\nimport ValuePropSection from './valueProp/valuePropSection'\nimport './valueProp.css'\n\nconst discoverContent = {\n  title: 'Discover',\n  icon: 'discover',\n  text: `Find out about great local places to visit with your family. From restaurants, to museums, \n\tparks and playgrounds, make the most of your time!`\n}\n\nconst trackContent = {\n  title: 'Track',\n  icon: 'track',\n  text: `Had a great time sharing a meal with your family or enjoyed a hiking trail? Jot it down to build your \n\troster of go-to places for your future trips.`\n}\n\nconst shareContent = {\n  title: 'Share',\n  icon: 'share',\n  text: `Share your favorite places to visit with friends and family; hear about what others are \n\tenjoying, for great new ideas.`\n}\n\nconst ValueProp = () => {\n  return (\n    <div className=\"value-prop-container\">\n      <ValuePropSection {...discoverContent} />\n      <ValuePropSection {...trackContent} />\n      <ValuePropSection {...shareContent} />\n    </div>\n  )\n}\n\nexport default ValueProp\n","export const AUTH_TOKEN = 'auth-token'\nexport const USER_INFO = 'user-info'","import { gql } from '@apollo/client'\n\nexport const VenueDetails = gql`\n  fragment VenueDetails on Venue {\n    id\n    name\n    slug\n    description\n    streetAddress\n    zipcode\n    city\n    state\n    lat\n    lng\n    venueTypes {\n      id\n      name\n      image\n    }\n  }\n`\n\nconst VenueStats = gql`\n  fragment VenueStats on Venue {\n    venueStats {\n      favorites\n      favoriteByCurrentUser\n    }\n  }\n`\n\nexport const GET_VENUE_BASICS = gql`\n  query($venueId: ID!) {\n    venue(id: $venueId) {\n      ...VenueDetails\n    }\n  }\n  ${VenueDetails}\n`\n\nexport const GET_VENUE_ADVANCED = gql`\n  query($venueId: ID!) {\n    venue(id: $venueId) {\n      ...VenueDetails\n      ...VenueStats\n    }\n  }\n  ${VenueDetails}\n  ${VenueStats}\n`\n\nexport const GET_VENUE_BY_SLUG = gql`\n  query($venueSlug: String!) {\n    venueBySlug(slug: $venueSlug) {\n      ...VenueDetails\n      ...VenueStats\n    }\n  }\n  ${VenueDetails}\n  ${VenueStats}\n`\n\nexport const GET_VENUES_FOR_CURRENT_USER = gql`\n  query {\n    me {\n      venues {\n        ...VenueDetails\n      }\n      favoriteVenues {\n        ...VenueDetails\n      }\n    }\n  }\n  ${VenueDetails}\n`\n\nexport const GET_VENUE_TYPES = gql`\n  query {\n    venueTypes {\n      id\n      name\n      image\n    }\n  }\n`\n\nexport const GET_SIMILAR_VENUES_IN_RADIUS = gql`\n  query($venueId: ID!, $limit: Int, $radius: Int) {\n    similarVenues(id: $venueId, first: $limit, radius: $radius) {\n      id\n      name\n      slug\n      streetAddress\n      zipcode\n      city\n    }\n  }\n`\n\nexport const GET_FEED_VENUES = gql`\n  query($cityIds: String, $venueTypeIds: String, $sort: String, $first: Int) {\n    venues(\n      cityIds: $cityIds\n      venueTypeIds: $venueTypeIds\n      sort: $sort\n      first: $first\n    ) {\n      id\n      createdAt\n      name\n      slug\n      description\n      streetAddress\n      zipcode\n      city\n      state\n      lat\n      lng\n      creator {\n        id\n        firstName\n        lastName\n      }\n      venueTypes {\n        id\n        name\n        image\n      }\n    }\n  }\n`\n","import { gql } from '@apollo/client'\nimport { VenueDetails } from './venueQueries'\n\nexport const CURRENT_USER_QUERY = gql`\n  query {\n    currentUser @client {\n      id\n      firstName\n      lastName\n    }\n  }\n`\n\nexport const CURRENT_USER_FEED_CONFIG_QUERY = gql`\n  query {\n    userFeedConfig {\n      cityIds\n      venueTypeIds\n      cityDetails {\n        id\n        name\n        state\n      }\n    }\n  }\n`\n\nexport const GET_USER_PROFILE_BY_PUBLIC_ID = gql`\n  query($publicId: String!) {\n    userProfile(publicId: $publicId) {\n      user {\n        id\n        firstName\n        lastName\n        zipcode\n      }\n      config {\n        headerImageUrl\n      }\n      stats {\n        created\n        favorited\n      }\n      recentFavoriteVenues {\n        ...VenueDetails\n      }\n      recentAddedVenues {\n        ...VenueDetails\n      }\n    }\n  }\n  ${VenueDetails}\n`\n","import { AUTH_TOKEN, USER_INFO } from '../constants'\nimport { graphql } from '@apollo/client/react/hoc'\nimport { compose } from 'recompose'\nimport { CURRENT_USER_QUERY } from '../graphql/userQueries'\n\nexport const isUserLoggedIn = () => !!localStorage.getItem(AUTH_TOKEN)\n\nexport const logoutUser = () => {\n  localStorage.removeItem(AUTH_TOKEN)\n  localStorage.removeItem(USER_INFO)\n}\n\nexport const setUserInfo = (token, user) => {\n  localStorage.setItem(AUTH_TOKEN, token)\n  localStorage.setItem(USER_INFO, JSON.stringify(user))\n}\n\nexport const getUserInfoFromStorage = () => {\n  const userInfo = localStorage.getItem(USER_INFO)\n\n  if (userInfo) {\n    return JSON.parse(userInfo)\n  } else {\n    return {\n      __typename: 'User',\n      id: null,\n      firstName: null,\n      lastName: null,\n      email: null\n    }\n  }\n}\n\nexport const withCurrentUser = WrappedComponent => {\n  return compose(\n    graphql(CURRENT_USER_QUERY, {\n      props: ({ data: { currentUser } }) => ({\n        currentUser\n      })\n    })\n  )(WrappedComponent)\n}\n\nexport const listenForOpenSignUpDialog = callback => {\n  window.addEventListener('openSignUpModal', () => callback())\n}\nexport const openSignUpDialog = () => {\n  const event = new Event('openSignUpModal')\n  window.dispatchEvent(event)\n}\n\nexport const shortName = user => {\n  if (user && user.firstName && user.lastName) {\n    return `${user.firstName} ${user.lastName[0]}.`\n  }\n\n  return ''\n}\n","import React from 'react'\nimport { isUserLoggedIn, openSignUpDialog } from '../../utils/userUtils'\n\nimport '../shared/button.css'\nimport './signup.css'\n\nconst SignUpSection = () => {\n  const renderSignUp = () => {\n    return (\n      <div>\n        <button\n          className=\"form-button homepage-signup-button\"\n          onClick={() => openSignUpDialog()}\n        >\n          Get Started\n        </button>\n      </div>\n    )\n  }\n\n  return <div>{!isUserLoggedIn() && renderSignUp()}</div>\n}\n\nexport default SignUpSection\n","import React from 'react'\nimport Header from './homepage/header'\nimport ValueProp from './homepage/valueProp'\nimport SignUpSection from './homepage/signup'\n\nconst HomePage = () => {\n  return (\n    <div>\n      <Header />\n      <ValueProp />\n      <SignUpSection />\n    </div>\n  )\n}\n\nexport default HomePage\n","import { gql } from '@apollo/client'\n\nexport const GET_CITIES = gql`\n  query($limit: Int, $query: String) {\n    cities(first: $limit, query: $query) {\n      id\n      name\n      state\n    }\n  }\n`\n","import React, { useState, useEffect } from 'react'\nimport Select from 'react-select'\nimport { GET_CITIES } from '../../graphql/cityQueries'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport { useApolloClient } from '@apollo/client'\n\nconst style = {\n  container: {\n    position: 'relative',\n    width: '500px'\n  },\n  formControl: {\n    minWidth: '500px',\n    marginTop: '16px',\n    marginBottom: '8px',\n    height: '16px'\n  }\n}\n\nconst CityFormField = ({\n  onCitySelected,\n  isMulti,\n  fieldLabel,\n  placeholder,\n  containerWidth,\n  containerDisplay,\n  initialValue\n}) => {\n  const client = useApolloClient()\n  const [query, setQuery] = useState('')\n  const [selectedOption, setSelectedOption] = useState(isMulti ? [] : {})\n  const [options, setOptions] = useState([])\n\n  useEffect(() => {\n    const getSuggestions = query => {\n      return client.query({\n        query: GET_CITIES,\n        variables: { limit: 10, query }\n      })\n    }\n\n    if (query && query.length >= 3) {\n      getSuggestions(query).then(({ data }) => {\n        setOptions(\n          data.cities.map(city => {\n            return { value: city.id, label: `${city.name}, ${city.state}` }\n          })\n        )\n      })\n    } else {\n      setOptions([])\n    }\n  }, [query, client])\n\n  useEffect(() => {\n    if (initialValue && Array.isArray(initialValue) && initialValue.length) {\n      setSelectedOption(\n        initialValue.map(city => {\n          return { value: city.id, label: `${city.name}, ${city.state}` }\n        })\n      )\n    }\n  }, [initialValue])\n\n  const handleInputChange = text => {\n    setQuery(text)\n  }\n\n  const handleOptionChange = option => {\n    setSelectedOption(option)\n    onCitySelected(option)\n  }\n\n  const hasOptions = () => options && options.length\n\n  return (\n    <div\n      style={{\n        ...style.container,\n        width: containerWidth ? containerWidth : '500px',\n        display: containerDisplay ? containerDisplay : 'block'\n      }}\n    >\n      <FormControl style={style.formControl}>\n        <InputLabel shrink={true} htmlFor=\"age-simple\">\n          {fieldLabel ? fieldLabel : 'City'}\n        </InputLabel>\n      </FormControl>\n      <Select\n        value={selectedOption}\n        defaultValue={null}\n        onChange={handleOptionChange}\n        options={options}\n        onInputChange={handleInputChange}\n        placeholder={placeholder ? placeholder : 'Type in name of city'}\n        isClearable={true}\n        isMulti={!!isMulti}\n        menuIsOpen={hasOptions()}\n        escapeClearsValue={true}\n      />\n    </div>\n  )\n}\n\nexport default CityFormField\n","import React, { useState } from 'react'\nimport { useQuery } from '@apollo/client'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\n\nimport { GET_VENUE_TYPES } from '../../graphql/venueQueries'\n\nconst style = {\n  formControl: {\n    minWidth: '500px',\n    marginTop: '16px',\n    marginBottom: '8px'\n  }\n}\n\nconst VenueTypeFormField = ({ onVenueTypeSelected }) => {\n  const [selectedOption, setSelectedOption] = useState('')\n  const { loading, error, data } = useQuery(GET_VENUE_TYPES)\n\n  const handleOptionChange = option => {\n    setSelectedOption(option)\n    onVenueTypeSelected(option)\n  }\n\n  if (loading) return 'Loading...'\n  if (error) return `Error! ${error.message}`\n\n  return (\n    <FormControl style={style.formControl}>\n      <InputLabel htmlFor=\"age-simple\">Venue Type</InputLabel>\n      <Select\n        value={selectedOption}\n        onChange={event => handleOptionChange(event.target.value)}\n        inputProps={{\n          name: 'type',\n          id: 'venue-type'\n        }}\n      >\n        {data.venueTypes.map(venueType => (\n          <MenuItem key={venueType.id} value={venueType.id}>\n            {venueType.name}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  )\n}\n\nexport default VenueTypeFormField\n","import { gql } from '@apollo/client'\n\nexport const CREATE_VENUE_MUTATION = gql`\n  mutation CreateVenueMutation(\n    $name: String!\n    $streetAddress: String!\n    $zipcode: Int!\n    $cityId: Int!\n    $typeId: Int!\n  ) {\n    createVenue(\n      name: $name\n      streetAddress: $streetAddress\n      zipcode: $zipcode\n      city: { id: $cityId }\n      venueType: { id: $typeId }\n    ) {\n      id\n      name\n      streetAddress\n      venueTypes {\n        name\n      }\n    }\n  }\n`\n\nexport const CREATE_USER_VENUE_FAVORITE_MUTATION = gql`\n  mutation CreateUserVenueFavorite($venueId: Int!) {\n    createUserVenueFavorite(venueId: $venueId) {\n      favorites\n      favoriteByCurrentUser\n    }\n  }\n`\n\nexport const DELETE_USER_VENUE_FAVORITE_MUTATION = gql`\n  mutation DeleteUserVenueFavorite($venueId: Int!) {\n    deleteUserVenueFavorite(venueId: $venueId) {\n      favorites\n      favoriteByCurrentUser\n    }\n  }\n`\n","import React, { useState } from 'react'\n\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport TextField from '@material-ui/core/TextField'\nimport NumberFormat from 'react-number-format'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport CloseIcon from '@material-ui/icons/Close'\nimport IconButton from '@material-ui/core/IconButton'\n\nimport CityFormField from './cityFormField'\nimport VenueTypeFormField from './venueTypeFormField'\nimport { CREATE_VENUE_MUTATION } from '../../graphql/venueMutations'\nimport Button from '@material-ui/core/Button'\n\nimport { validateVenue } from '../../utils/validationUtils'\n\nimport { useMutation } from '@apollo/client'\nimport { GET_VENUES_FOR_CURRENT_USER } from '../../graphql/venueQueries'\n\nconst USER_ACTION_TEXT = 'Please enter information about a venue'\nconst USER_ACTION_TEXT_ERROR = 'Please enter valid venue information'\n\nconst style = {\n  appBar: {\n    position: 'relative'\n  },\n  title: {\n    margin: '0 auto'\n  },\n  body: {\n    margin: '0 auto'\n  },\n  input: {\n    minWidth: '500px'\n  }\n}\n\nconst venueStub = {\n  name: '',\n  type: {\n    id: null\n  },\n  streetAddress: '',\n  zipcode: '',\n  lat: '',\n  lng: '',\n  city: {}\n}\n\nconst AddVenueDialog = ({ open, toggleDialog, onCreatedVenue }) => {\n  const [addVenue] = useMutation(CREATE_VENUE_MUTATION, {\n    onError(error) {\n      console.log('error', error)\n    },\n    onCompleted(data) {\n      onCreatedVenue()\n    },\n    refetchQueries: [\n      {\n        query: GET_VENUES_FOR_CURRENT_USER\n      }\n    ],\n    awaitRefetchQueries: true\n  })\n\n  const [newVenue, setNewVenue] = useState({ ...venueStub })\n  const [userActionText, setUserActionText] = useState(USER_ACTION_TEXT)\n\n  const onCitySelected = city => {\n    if (city && city.value) {\n      setNewVenue({ ...newVenue, city: { id: city.value } })\n    } else {\n      setNewVenue({ ...newVenue, city: {} })\n    }\n  }\n\n  const onVenueTypeSelected = venueTypeId => {\n    setNewVenue({ ...newVenue, type: { id: venueTypeId } })\n  }\n\n  const handleChange = name => event => {\n    setNewVenue({ ...newVenue, [name]: event.target.value })\n  }\n\n  const onSubmit = () => {\n    if (validateVenue(newVenue)) {\n      addVenue({\n        variables: {\n          name: newVenue.name,\n          typeId: newVenue.type.id,\n          streetAddress: newVenue.streetAddress,\n          zipcode: parseInt(newVenue.zipcode),\n          cityId: newVenue.city.id\n        }\n      }).then(response => {\n        setNewVenue({ ...venueStub })\n        toggleDialog()\n      })\n    } else {\n      setUserActionText(USER_ACTION_TEXT_ERROR)\n    }\n  }\n\n  return (\n    <Dialog\n      open={open}\n      onClose={toggleDialog}\n      fullScreen={true}\n      aria-labelledby=\"form-dialog-title\"\n    >\n      <AppBar style={style.appBar}>\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            onClick={toggleDialog}\n            aria-label=\"close\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <DialogTitle style={style.title}>Add New Destination</DialogTitle>\n      <DialogContent style={style.body}>\n        <DialogContentText>{userActionText}</DialogContentText>\n        <TextField\n          id=\"venue-name\"\n          label=\"Venue name\"\n          value={newVenue.name}\n          onChange={handleChange('name')}\n          margin=\"normal\"\n          style={style.input}\n        />\n        <br />\n        <VenueTypeFormField onVenueTypeSelected={onVenueTypeSelected} />\n        <br />\n        <TextField\n          id=\"venue-street-address\"\n          name=\"street-address\"\n          label=\"Street address\"\n          value={newVenue.streetAddress}\n          onChange={handleChange('streetAddress')}\n          margin=\"normal\"\n          autoComplete=\"shipping street-address\"\n          style={style.input}\n        />\n        <CityFormField onCitySelected={onCitySelected} />\n\n        <NumberFormat\n          customInput={TextField}\n          id=\"venue-zipcode\"\n          name=\"zipcode\"\n          label=\"Zipcode\"\n          value={newVenue.zipcode}\n          onChange={handleChange('zipcode')}\n          margin=\"normal\"\n          style={style.input}\n          autoComplete=\"postal-code\"\n          format=\"#####\"\n        />\n        <div>\n          <Button color=\"primary\" onClick={onSubmit}>\n            Create venue\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nexport default AddVenueDialog\n","export const validateVenue = ({ name, type, streetAddress, city, zipcode }) => {\n\tlet valid = {\n\t\tname: false,\n\t\ttype: false,\n\t\tstreetAddress: false,\n\t\tcity: false,\n\t\tzipcode: false\n\t}\n\n\tif (name && name.length >= 2) {\n\t\tvalid.name = true\n\t}\n\n\tif(type && type.id) {\n\t\tvalid.type = true\n\t}\n\n\tif(streetAddress && streetAddress.length >= 2) {\n\t\tvalid.streetAddress = true\n\t}\n\n\tif(city && city.id) {\n\t\tvalid.city = true\n\t}\n\n\tif(zipcode && !isNaN(parseInt(zipcode))) {\n\t\tvalid.zipcode = true\n\t}\n\n\treturn (Object.values(valid).indexOf(false) === -1)\n}","import React from 'react'\nimport AppBar from \"@material-ui/core/AppBar/AppBar\"\nimport Tabs from \"@material-ui/core/Tabs\"\nimport Tab from \"@material-ui/core/Tab\"\nimport { withStyles } from \"@material-ui/core\"\n\nconst styles = {\n\tappBar: {\n\t\tboxShadow: \"none\",\n\t\tfloat: \"left\",\n\t\twidth: '300px',\n\t},\n\ttabIndicator: {\n\t\tbackgroundColor: '#ffffff',\n\t},\n}\n\nconst VenueTypeTabs = ({ classes, venues, venueTypeFilter, onSetVenueTypeFilter }) => {\n\tconst handleVenueTypeClick = (e, value) => {\n\t\tonSetVenueTypeFilter(value)\n\t}\n\n\tconst getVenueTypes = venues => {\n\t\tlet results = {}\n\n\t\tfor (let x = 0; x < venues.length; x++) {\n\t\t\tif ((venues[x].venueTypes && venues[x].venueTypes.length)) {\n\t\t\t\tif (results[venues[x].venueTypes[0].name]) {\n\t\t\t\t\tresults[venues[x].venueTypes[0].name].venues.push(venues[x])\n\t\t\t\t} else {\n\t\t\t\t\tresults[venues[x].venueTypes[0].name] = {\n\t\t\t\t\t\ttype: {\n\t\t\t\t\t\t\tid: venues[x].venueTypes[0].id,\n\t\t\t\t\t\t\tname: venues[x].venueTypes[0].name,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tvenues: [venues[x]],\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn Object.keys(results)\n\t}\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<AppBar position=\"static\" className={classes.appBar}>\n\t\t\t\t<Tabs value={venueTypeFilter}\n\t\t\t\t\t\t\tonChange={handleVenueTypeClick}\n\t\t\t\t\t\t\tclasses={{ indicator: classes.tabIndicator }}\n\t\t\t\t\t\t\torientation=\"vertical\"\n\t\t\t\t\t\t\tvariant=\"scrollable\"\n\t\t\t\t\t\t\tscrollButtons=\"auto\">\n\t\t\t\t\t<Tab label='all' value='all'/>\n\t\t\t\t\t{getVenueTypes(venues).sort().map((type, index) => (\n\t\t\t\t\t\t<Tab label={type} value={type} key={index}/>\n\t\t\t\t\t))}\n\t\t\t\t</Tabs>\n\t\t\t</AppBar>\n\t\t</React.Fragment>\n\t)\n}\n\nexport default withStyles(styles)(VenueTypeTabs)","import React from 'react'\nimport {\n  DirectionsRun,\n  DirectionsWalk,\n  NearMe,\n  Restaurant,\n  Museum,\n  Nature,\n  NaturePeople,\n  Pets\n} from '@material-ui/icons'\n\nexport const venueMapLink = venue => {\n  const address = `${venue.streetAddress}, ${venue.city}, ${venue.state} ${venue.zipcode}`\n  return `https://maps.google.com/?q=${encodeURIComponent(address)}`\n}\n\nexport const venueIcon = (venue, cssClass) => {\n  let venueIconComponent\n\n  switch (venue.venueTypes[0].name) {\n    case 'restaurant':\n      venueIconComponent = <Restaurant className={cssClass} />\n      break\n    case 'museum':\n      venueIconComponent = <Museum className={cssClass} />\n      break\n    case 'zoo':\n      venueIconComponent = <Pets className={cssClass} />\n      break\n    case 'hiking trail':\n      venueIconComponent = <DirectionsWalk className={cssClass} />\n      break\n    case 'outdoor park':\n      venueIconComponent = <Nature className={cssClass} />\n      break\n    case 'camp site':\n      venueIconComponent = <NaturePeople className={cssClass} />\n      break\n    case 'outdoor playground':\n      venueIconComponent = <DirectionsRun className={cssClass} />\n      break\n    default:\n      venueIconComponent = <NearMe className={cssClass} />\n  }\n\n  return venueIconComponent\n}\n\nexport const venueHeaderImage = venue => venue.venueTypes[0].image\n\nexport const venuePrimaryTypeName = venue => venue.venueTypes[0].name || 'venue'\n\nexport const venueCityState = venue => `${venue.city}, ${venue.state}`\n\nexport const venueAddress = (venue, separator = ', ', format = '') => {\n  if (venue) {\n    if (format === 'raw') {\n      return `${venue.streetAddress}${separator}${venueCityState(venue)} ${\n        venue.zipcode\n      }`\n    } else {\n      return (\n        <span>\n          {venue.streetAddress}\n          {separator}\n          {venueCityState(venue)} {venue.zipcode}\n        </span>\n      )\n    }\n  }\n\n  return ''\n}\n","import React from 'react'\nimport { withStyles } from '@material-ui/core/styles'\n\nimport { venueMapLink, venueIcon, venueCityState } from '../../utils/venueUtils'\nimport { Link as RouterLink } from 'react-router-dom'\nimport Routes from '../../routes'\nimport { useMutation } from '@apollo/client'\nimport { DELETE_USER_VENUE_FAVORITE_MUTATION } from '../../graphql/venueMutations'\nimport {\n  GET_VENUE_BY_SLUG,\n  GET_VENUES_FOR_CURRENT_USER\n} from '../../graphql/venueQueries'\n\nconst styles = {\n  '@global': {\n    '.venueItem': {\n      border: '1px solid #eee',\n      borderRadius: '8px',\n      marginTop: '5px',\n      marginBottom: '5px',\n      // backgroundColor: '#f6f6f6',\n      padding: '15px',\n      width: '49%',\n      display: 'inline-block',\n      '&:nth-child(odd)': {\n        marginRight: '10px'\n      }\n    },\n    '.venueItemTitle': {\n      display: 'block',\n      fontSize: '18px',\n      fontWeight: 500,\n      lineHeight: 1.6,\n      color: '#333333',\n      textDecoration: 'none',\n      '&:hover': {\n        textDecoration: 'underline'\n      }\n    },\n    '.venueItemDescription': {},\n    '.venueItemTypeBadge': {\n      display: 'inline-block',\n      padding: '1px 5px',\n      backgroundColor: '#2196f3',\n      color: '#fff',\n      borderRadius: '3px',\n      height: '22px'\n    },\n    '.venueItemTypeBadgeText': {\n      marginLeft: '20px',\n      marginTop: '3px',\n      textTransform: 'uppercase',\n      fontSize: '11px',\n      fontWeight: 600,\n      minWidth: '75px',\n      textAlign: 'center'\n    },\n    '.venueItemLocation': {\n      textTransform: 'uppercase',\n      fontSize: '11px',\n      fontWeight: 600,\n      textDecoration: 'none',\n      float: 'right',\n      marginTop: '4px',\n      color: '#666'\n    },\n    '.venueIcon': {\n      float: 'left',\n      width: '15px',\n      height: 'auto',\n      marginRight: '5px',\n      position: 'relative',\n      top: '2px'\n    },\n    '.venueUnlike': {\n      float: 'right'\n    }\n  }\n}\n\nconst VenueListItem = props => {\n  const { venue, showDeleteFavoriteButton, onDeleteFavoriteCallback } = props\n\n  const [deleteFavorite] = useMutation(DELETE_USER_VENUE_FAVORITE_MUTATION, {\n    onError(error) {\n      console.log('error', error)\n    },\n    update: (store, { data: { deleteUserVenueFavorite } }) => {\n      updateFavoriteStats(store, deleteUserVenueFavorite)\n    },\n    onCompleted: () => {\n      onDeleteFavoriteCallback()\n    },\n    refetchQueries: [\n      {\n        query: GET_VENUES_FOR_CURRENT_USER\n      }\n    ],\n    awaitRefetchQueries: true\n  })\n\n  const updateFavoriteStats = (store, venueStats) => {\n    try {\n      let data = store.readQuery({\n        query: GET_VENUE_BY_SLUG,\n        variables: { venueSlug: venue.slug }\n      })\n\n      data.venueBySlug.venueStats = venueStats\n\n      store.writeQuery({\n        query: GET_VENUE_BY_SLUG,\n        variables: { venueSlug: venue.slug },\n        data\n      })\n    } catch (e) {}\n  }\n\n  const onDeleteFavorite = () =>\n    deleteFavorite({\n      variables: {\n        venueId: venue.id\n      }\n    })\n\n  return (\n    <div className=\"venueItem\">\n      {showDeleteFavoriteButton && (\n        <button\n          onClick={() => {\n            onDeleteFavorite()\n          }}\n          className=\"venueUnlike\"\n        >\n          Unlike\n        </button>\n      )}\n\n      <RouterLink to={Routes.venuePath(venue.slug)} className=\"venueItemTitle\">\n        {venue.name}\n      </RouterLink>\n      <div className=\"venueItemDescription\">\n        <div className=\"venueItemTypeBadge\">\n          {venueIcon(venue, 'venueIcon')}\n          <div className=\"venueItemTypeBadgeText\">\n            {venue.venueTypes && venue.venueTypes.length\n              ? `${venue.venueTypes[0].name}`\n              : ''}\n          </div>\n        </div>\n        <a\n          href={venueMapLink(venue)}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"venueItemLocation\"\n        >\n          {venueCityState(venue)}\n        </a>\n      </div>\n    </div>\n  )\n}\n\nexport default withStyles(styles)(VenueListItem)\n","import React, { Fragment, useEffect, useState } from 'react'\nimport VenueTypeTabs from './venueTypeTabs'\nimport VenueListItem from './venueListItem'\nimport { withStyles } from '@material-ui/core/styles'\nimport { GET_VENUES_FOR_CURRENT_USER } from '../../graphql/venueQueries'\nimport { useApolloClient } from '@apollo/client'\n\nconst styles = {\n  '@global': {\n    '.venueList': {\n      marginLeft: '320px'\n    }\n  }\n}\n\nconst VenueList = ({\n  currentDashboardSection,\n  isFavoritesDashboardSection,\n  externalTriggerVenueRefresh\n}) => {\n  const client = useApolloClient()\n  const [venueTypeFilter, setVenueTypeFilter] = useState('all')\n  const [venues, setVenues] = useState([])\n  const [triggerVenueRefresh, setTriggerVenueRefresh] = useState(true)\n\n  useEffect(() => {\n    const getVenueData = () => {\n      client\n        .query({\n          query: GET_VENUES_FOR_CURRENT_USER\n        })\n        .then(({ data }) => {\n          setVenues(\n            isFavoritesDashboardSection\n              ? data.me.favoriteVenues\n              : data.me.venues\n          )\n        })\n    }\n\n    getVenueData()\n    setVenueTypeFilter('all')\n  }, [\n    currentDashboardSection,\n    triggerVenueRefresh,\n    externalTriggerVenueRefresh,\n    isFavoritesDashboardSection,\n    client\n  ])\n\n  const onDeleteFavorite = () => {\n    setTriggerVenueRefresh(!triggerVenueRefresh)\n  }\n\n  return (\n    <Fragment>\n      <VenueTypeTabs\n        venues={venues}\n        onSetVenueTypeFilter={setVenueTypeFilter}\n        venueTypeFilter={venueTypeFilter}\n      ></VenueTypeTabs>\n      <div className=\"venueList\">\n        {venues\n          .filter(\n            venue =>\n              venueTypeFilter === 'all' ||\n              venue.venueTypes[0].name === venueTypeFilter\n          )\n          .map(venue => (\n            <VenueListItem\n              key={venue.id}\n              venue={venue}\n              showDeleteFavoriteButton={isFavoritesDashboardSection}\n              onDeleteFavoriteCallback={onDeleteFavorite}\n            />\n          ))}\n      </div>\n    </Fragment>\n  )\n}\n\nexport default withStyles(styles)(VenueList)\n","import { gql } from '@apollo/client'\n\nexport const SIGNUP_MUTATION = gql`\n  mutation SignupMutation(\n    $email: String!\n    $password: String!\n    $firstName: String!\n    $lastName: String!\n  ) {\n    signup(\n      email: $email\n      password: $password\n      firstName: $firstName\n      lastName: $lastName\n    ) {\n      token\n      user {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n`\n\nexport const LOGIN_MUTATION = gql`\n  mutation LoginMutation($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n`\n\nexport const UPDATE_CURRENT_USER_FEED_CONFIG_MUTATION = gql`\n  mutation UpdateCurrentUserFeedConfigMutation(\n    $cityIds: String\n    $venueTypeIds: String\n  ) {\n    updateUserFeedConfig(cityIds: $cityIds, venueTypeIds: $venueTypeIds) {\n      cityIds\n      venueTypeIds\n    }\n  }\n`\n","import React, { Fragment } from 'react'\nimport { withStyles } from '@material-ui/core/styles'\nimport { sinceCreated } from '../../utils/dateUtils'\nimport { shortName } from '../../utils/userUtils'\nimport Routes from '../../routes'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { venueCityState } from '../../utils/venueUtils'\n\nconst styles = {\n  '@global': {\n    '.feedItem': {\n      borderBottom: '1px solid #eee',\n      marginTop: '5px',\n      marginBottom: '5px',\n      padding: '15px'\n    },\n    '.feedItemTitle': {\n      fontWeight: 600,\n      color: '#000',\n      textDecoration: 'none',\n      fontSize: '15px',\n      '&:hover': {\n        textDecoration: 'underline'\n      }\n    },\n    '.feedItemSubtitle': {\n      fontSize: '12px'\n    }\n  }\n}\n\nconst FeedItem = ({ venue }) => {\n  return (\n    <div className=\"feedItem\">\n      <RouterLink to={Routes.venuePath(venue.slug)} className=\"feedItemTitle\">\n        {venue.name}\n      </RouterLink>\n      <div className=\"feedItemSubtitle\">\n        in {venueCityState(venue)}\n        {venue.creator && (\n          <Fragment>\n            <br />\n            added {sinceCreated(venue.createdAt)} by &nbsp;\n            <RouterLink to={Routes.userProfilePath(venue.creator.id)}>\n              {shortName(venue.creator)}\n            </RouterLink>\n          </Fragment>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default withStyles(styles)(FeedItem)\n","export const localDateTime = timestamp => {\n  return new Date(timestamp).toLocaleString()\n}\n\nexport const sinceCreated = timestamp => {\n  const then = new Date(timestamp)\n  const now = new Date()\n\n  const diffSeconds = (now.getTime() - then.getTime()) / 1000\n\n  let response\n\n  if (diffSeconds <= 60) {\n    response = 'now'\n  } else if (diffSeconds < 90) {\n    response = Math.round(diffSeconds / 60) + ' minute ago'\n  } else if (diffSeconds <= 3600) {\n    response = Math.round(diffSeconds / 60) + ' minutes ago'\n  } else if (diffSeconds < 5400) {\n    response = Math.round(diffSeconds / 3600) + ' hour ago'\n  } else if (diffSeconds <= 86400) {\n    response = Math.round(diffSeconds / 3600) + ' hours ago'\n  } else {\n    response =\n      'on ' +\n      then.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      })\n  }\n\n  return response\n}\n","import React, { useState, useEffect } from 'react'\nimport Select from 'react-select'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport { GET_VENUE_TYPES } from '../../graphql/venueQueries'\nimport { useApolloClient } from '@apollo/client'\n\nconst style = {\n  container: {\n    position: 'relative',\n    width: '350px',\n    display: 'inline-block'\n  },\n  formControl: {\n    minWidth: '500px',\n    marginTop: '16px',\n    marginBottom: '8px',\n    height: '16px'\n  }\n}\n\nconst VenueTypeMultiFormField = ({ initialValue, onVenueTypeSelected }) => {\n  const client = useApolloClient()\n  const [selectedOption, setSelectedOption] = useState([])\n  const [options, setOptions] = useState([])\n\n  useEffect(() => {\n    client\n      .query({\n        query: GET_VENUE_TYPES\n      })\n      .then(({ data }) => {\n        setOptions(\n          data.venueTypes.map(venueType => {\n            return { value: venueType.id, label: venueType.name }\n          })\n        )\n      })\n  }, [client])\n\n  useEffect(() => {\n    if (options && options.length && initialValue) {\n      const defaultVenueTypeIds = initialValue.split(',').map(venueTypeId => {\n        return parseInt(venueTypeId)\n      })\n\n      setSelectedOption(\n        options.filter(venueType =>\n          defaultVenueTypeIds.includes(venueType.value)\n        )\n      )\n    }\n  }, [options, initialValue])\n\n  const handleOptionChange = option => {\n    setSelectedOption(option)\n    onVenueTypeSelected(option)\n  }\n\n  return (\n    <div style={style.container}>\n      <FormControl style={style.formControl}>\n        <InputLabel shrink={true} htmlFor=\"age-simple\">\n          Venue type\n        </InputLabel>\n      </FormControl>\n      <Select\n        value={selectedOption}\n        defaultValue={null}\n        onChange={handleOptionChange}\n        options={options}\n        placeholder=\"Select venue type\"\n        isClearable={true}\n        isMulti={true}\n        isSearchable={false}\n        escapeClearsValue={true}\n      />\n    </div>\n  )\n}\n\nexport default VenueTypeMultiFormField\n","import React, { useState, useEffect } from 'react'\nimport CityFormField from './cityFormField'\nimport VenueTypeMultiFormField from './venueTypeMultiFormField'\n\nconst FeedConfigurator = ({\n  feedConfiguration,\n  onFeedConfigurationUpdated\n}) => {\n  const [cityIds, setCityIds] = useState()\n  const [venueTypeIds, setVenueTypeIds] = useState()\n\n  useEffect(() => {\n    setCityIds(feedConfiguration.cityIds)\n    setVenueTypeIds(feedConfiguration.venueTypeIds)\n  }, [feedConfiguration])\n\n  const onCitySelected = cities => {\n    const ids = cities ? cities.map(city => city.value).join(',') : null\n    setCityIds(ids)\n    onFeedConfigurationUpdated({ cityIds: ids, venueTypeIds })\n  }\n\n  const onVenueTypeSelected = venueTypes => {\n    const ids = venueTypes\n      ? venueTypes.map(venueType => venueType.value).join(',')\n      : null\n    setVenueTypeIds(ids)\n    onFeedConfigurationUpdated({ venueTypeIds: ids, cityIds })\n  }\n\n  return (\n    <div>\n      <CityFormField\n        onCitySelected={onCitySelected}\n        fieldLabel=\"Filter feed by city\"\n        placeholder=\"e.g.: San Francisco, CA\"\n        isMulti={true}\n        containerWidth=\"350px\"\n        containerDisplay=\"inline-block\"\n        initialValue={feedConfiguration.cityDetails}\n      ></CityFormField>\n      <div\n        style={{ display: 'inline-block', width: '30px', height: '20px' }}\n      ></div>\n      <VenueTypeMultiFormField\n        initialValue={venueTypeIds}\n        onVenueTypeSelected={onVenueTypeSelected}\n      ></VenueTypeMultiFormField>\n    </div>\n  )\n}\n\nexport default FeedConfigurator\n","import React, { useEffect, useState } from 'react'\nimport { useMutation, useApolloClient } from '@apollo/client'\nimport { withStyles } from '@material-ui/core/styles'\nimport { GET_FEED_VENUES } from '../../graphql/venueQueries'\nimport { CURRENT_USER_FEED_CONFIG_QUERY } from '../../graphql/userQueries'\nimport { UPDATE_CURRENT_USER_FEED_CONFIG_MUTATION } from '../../graphql/userMutations'\n\nimport FeedItem from './feedItem'\nimport FeedConfigurator from './feedConfigurator'\n\nconst styles = {\n  '@global': {\n    '.feedContainer': {\n      maxWidth: '50%',\n      minWidth: '400px'\n    }\n  }\n}\n\nconst Feed = () => {\n  const client = useApolloClient()\n  const [feedVenues, setFeedVenues] = useState([])\n  const [feedConfiguration, setFeedConfiguration] = useState({\n    cityIds: null,\n    venueTypeIds: null,\n    sort: 'DESC',\n    first: 25,\n    init: false\n  })\n\n  const [updateCurrentUserFeedConfigMutation] = useMutation(\n    UPDATE_CURRENT_USER_FEED_CONFIG_MUTATION\n  )\n\n  useEffect(() => {\n    client\n      .query({\n        query: CURRENT_USER_FEED_CONFIG_QUERY\n      })\n      .then(({ data }) => {\n        setFeedConfiguration({\n          init: true,\n          sort: 'DESC',\n          first: 25,\n          ...data.userFeedConfig\n        })\n      })\n  }, [client])\n\n  useEffect(() => {\n    if (feedConfiguration.init) {\n      client\n        .query({\n          query: GET_FEED_VENUES,\n          variables: {\n            ...feedConfiguration\n          }\n        })\n        .then(({ data }) => {\n          setFeedVenues(data.venues)\n        })\n    }\n  }, [client, feedConfiguration])\n\n  const onFeedConfigurationUpdated = newFeedConfiguration => {\n    if (newFeedConfiguration) {\n      setFeedConfiguration({ ...newFeedConfiguration, init: true })\n    }\n\n    updateCurrentUserFeedConfigMutation({\n      variables: {\n        cityIds: newFeedConfiguration.cityIds,\n        venueTypeIds: newFeedConfiguration.venueTypeIds\n      }\n    })\n  }\n\n  return (\n    <div>\n      <FeedConfigurator\n        feedConfiguration={feedConfiguration}\n        onFeedConfigurationUpdated={onFeedConfigurationUpdated}\n      ></FeedConfigurator>\n      <div className=\"feedContainer\">\n        {feedVenues.map(venue => (\n          <FeedItem key={venue.id} venue={venue}></FeedItem>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default withStyles(styles)(Feed)\n","import React from 'react'\n\nconst withPageTemplate = WrappedComponent =>\n  class NewComponent extends React.Component {\n    render() {\n      return (\n        <div className=\"mainContainer\">\n          <div className=\"mainContent\">\n            <WrappedComponent {...this.props}></WrappedComponent>\n          </div>\n        </div>\n      )\n    }\n  }\n\nexport default withPageTemplate\n","import React, { useState } from 'react'\nimport { withStyles } from '@material-ui/core/styles'\nimport { Link as RouterLink } from 'react-router-dom'\nimport Button from '@material-ui/core/Button'\nimport { Add } from '@material-ui/icons'\nimport Routes from '../routes'\n\nimport AddVenueDialog from './dashboard/addVenueDialog'\nimport VenueList from './dashboard/venueList'\nimport Feed from './dashboard/feed'\nimport withPageTemplate from './shared/withPageTemplate'\n\nconst DASHBOARD_SECTION = {\n  FEED: 'feed',\n  FOLLOWED_DESTINATIONS: 'followed-destinations',\n  MY_DESTINATIONS: 'my-destinations',\n  FAVORITES: 'favorites'\n}\n\nconst styles = {\n  '@global': {\n    '.sectionHeader': {\n      marginBottom: '30px',\n      display: 'flex'\n    },\n    '.sectionHeaderTitle': {\n      flexGrow: 2,\n      maxWidth: '250px',\n      cursor: 'pointer',\n      textDecoration: 'none',\n      color: '#666',\n      textAlign: 'center',\n      textTransform: 'uppercase',\n      borderRadius: '8px',\n      margin: '0px 10px',\n      fontSize: '14px',\n      fontWeight: 600,\n      lineHeight: 2.5,\n      letterSpacing: '1.3px',\n      border: '1px solid #eee'\n    },\n    '.sectionHeaderTitleSelected': {\n      backgroundColor: '#f9f8f8'\n    },\n    '.venueList': {\n      marginLeft: '320px'\n    }\n  }\n}\n\nconst DashboardPage = ({ match }) => {\n  const currentDashboardSection = Routes.validatePageSection(\n    match.params.section,\n    DASHBOARD_SECTION,\n    DASHBOARD_SECTION.FEED\n  )\n\n  const [dialogOpen, setDialogOpen] = useState(false)\n  const [\n    externalTriggerVenueRefresh,\n    setExternalTriggerVenueRefresh\n  ] = useState(true)\n\n  const toggleDialog = () => {\n    setDialogOpen(!dialogOpen)\n  }\n\n  const renderDashboardSection = (text, dashboardSection) => {\n    return (\n      <RouterLink\n        to={Routes.dashboardPath(dashboardSection)}\n        className={`sectionHeaderTitle ${\n          currentDashboardSection === dashboardSection\n            ? 'sectionHeaderTitleSelected'\n            : ''\n        }`}\n      >\n        {text}\n      </RouterLink>\n    )\n  }\n\n  const onCreatedVenue = () =>\n    setExternalTriggerVenueRefresh(!externalTriggerVenueRefresh)\n\n  return (\n    <React.Fragment>\n      <div className=\"sectionHeader\">\n        {renderDashboardSection('Feed', DASHBOARD_SECTION.FEED)}\n        {renderDashboardSection(\n          'My destinations',\n          DASHBOARD_SECTION.MY_DESTINATIONS\n        )}\n        {renderDashboardSection(\n          'Favorite destinations',\n          DASHBOARD_SECTION.FAVORITES\n        )}\n        <Button\n          variant=\"outlined\"\n          style={{ marginLeft: 'auto' }}\n          onClick={toggleDialog}\n        >\n          <Add />\n          Add Destination\n        </Button>\n        <AddVenueDialog\n          open={dialogOpen}\n          toggleDialog={toggleDialog}\n          onCreatedVenue={onCreatedVenue}\n        />\n      </div>\n      {currentDashboardSection === DASHBOARD_SECTION.FEED ? (\n        <Feed></Feed>\n      ) : (\n        <VenueList\n          currentDashboardSection={currentDashboardSection}\n          isFavoritesDashboardSection={\n            currentDashboardSection === DASHBOARD_SECTION.FAVORITES\n          }\n          externalTriggerVenueRefresh={externalTriggerVenueRefresh}\n        ></VenueList>\n      )}\n    </React.Fragment>\n  )\n}\n\nexport default withStyles(styles)(withPageTemplate(DashboardPage))\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport { headerStyles } from '../../utils/styleUtils'\nimport { venueHeaderImage } from '../../utils/venueUtils'\n\nconst VenueHeader = props => {\n  const { venue } = props\n  const headerStyle = headerStyles(`${venueHeaderImage(venue)}`, '300px')\n\n  return (\n    <div style={headerStyle.container}>\n      <Typography variant=\"h2\" style={headerStyle.headerText}>\n        <strong>{venue.name}</strong>\n      </Typography>\n    </div>\n  )\n}\n\nexport default VenueHeader\n","import React, { useState, useEffect } from 'react'\nimport { GET_SIMILAR_VENUES_IN_RADIUS } from '../../graphql/venueQueries'\nimport '../shared/sidebarModule.css'\nimport { Link as RouterLink } from 'react-router-dom'\nimport Routes from '../../routes'\nimport { useApolloClient } from '@apollo/client'\n\nconst SimilarVenues = ({ venue }) => {\n  const client = useApolloClient()\n  const [similarVenues, setSimilarVenues] = useState([])\n  useEffect(() => {\n    client\n      .query({\n        query: GET_SIMILAR_VENUES_IN_RADIUS,\n        variables: { venueId: venue.id, limit: 5, radius: 10 }\n      })\n      .then(({ data }) => {\n        setSimilarVenues(data.similarVenues)\n      })\n  }, [venue, client])\n\n  return (\n    <div\n      className=\"sidebar-module\"\n      style={{\n        display: similarVenues && similarVenues.length ? 'block' : 'none'\n      }}\n    >\n      <h3>Similar places near by</h3>\n      <div className=\"sidebar-module-body\">\n        {similarVenues &&\n          similarVenues.map(venue => (\n            <div key={venue.id}>\n              <RouterLink to={Routes.venuePath(venue.slug)}>\n                {venue.name}\n              </RouterLink>\n            </div>\n          ))}\n      </div>\n    </div>\n  )\n}\n\nexport default SimilarVenues\n","import React from 'react'\nimport '../shared/sidebarModule.css'\nimport { venueAddress } from '../../utils/venueUtils'\nimport { GOOGLE_DIRECTIONS_URL } from '../../utils/urlUtils'\n\nconst LocationInfo = ({ venue }) => {\n  return (\n    <div className=\"sidebar-module\">\n      <h3>Location</h3>\n      <div className=\"sidebar-module-body\">\n        <a\n          href={`${GOOGLE_DIRECTIONS_URL}${encodeURIComponent(\n            venueAddress(venue, ',', 'raw')\n          )}`}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {venueAddress(venue, <br />)}\n        </a>\n      </div>\n    </div>\n  )\n}\n\nexport default LocationInfo\n","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport {\n  CREATE_USER_VENUE_FAVORITE_MUTATION,\n  DELETE_USER_VENUE_FAVORITE_MUTATION\n} from '../../graphql/venueMutations'\nimport {\n  GET_VENUE_BY_SLUG,\n  GET_VENUES_FOR_CURRENT_USER\n} from '../../graphql/venueQueries'\n\nconst FavoriteButton = ({\n  venueId,\n  venueSlug,\n  favoriteByCurrentUser,\n  onUpdateFavoritesStats\n}) => {\n  const refetchQueries = [\n    {\n      query: GET_VENUES_FOR_CURRENT_USER\n    }\n  ]\n\n  const updateFavoriteStats = (store, venueStats) => {\n    let data = store.readQuery({\n      query: GET_VENUE_BY_SLUG,\n      variables: { venueSlug }\n    })\n\n    onUpdateFavoritesStats(venueStats)\n\n    store.writeQuery({\n      query: GET_VENUE_BY_SLUG,\n      variables: { venueSlug },\n      data: {\n        ...data,\n        venueBySlug: { ...data.venueBySlug, venueStats: { ...venueStats } }\n      }\n    })\n  }\n\n  const [addFavorite] = useMutation(CREATE_USER_VENUE_FAVORITE_MUTATION, {\n    onError(error) {\n      console.log('error', error)\n    },\n    update: (store, { data: { createUserVenueFavorite } }) => {\n      updateFavoriteStats(store, createUserVenueFavorite)\n    },\n    refetchQueries\n  })\n\n  const [deleteFavorite] = useMutation(DELETE_USER_VENUE_FAVORITE_MUTATION, {\n    onError(error) {\n      console.log('error', error)\n    },\n    update: (store, { data: { deleteUserVenueFavorite } }) => {\n      updateFavoriteStats(store, deleteUserVenueFavorite)\n    },\n    refetchQueries\n  })\n\n  const onAddFavorite = () =>\n    addFavorite({\n      variables: {\n        venueId: venueId\n      }\n    })\n\n  const onDeleteFavorite = () =>\n    deleteFavorite({\n      variables: {\n        venueId: venueId\n      }\n    })\n\n  return (\n    <React.Fragment>\n      {favoriteByCurrentUser ? (\n        <span>\n          &#9733;&nbsp;\n          <button\n            onClick={e => {\n              e.preventDefault()\n              onDeleteFavorite()\n            }}\n          >\n            {' '}\n            Unlike\n          </button>\n        </span>\n      ) : (\n        <button\n          href=\"#\"\n          onClick={e => {\n            e.preventDefault()\n            onAddFavorite()\n          }}\n        >\n          Like\n        </button>\n      )}\n    </React.Fragment>\n  )\n}\n\nexport default FavoriteButton\n","import React, { useEffect, useState } from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport NumberFormat from 'react-number-format'\nimport pluralize from 'pluralize'\nimport { GET_VENUE_BY_SLUG } from '../graphql/venueQueries'\n\nimport VenueHeader from './venue/header'\nimport SimilarVenues from './venue/similarVenues'\nimport { venuePrimaryTypeName } from '../utils/venueUtils'\nimport { isUserLoggedIn } from '../utils/userUtils'\nimport LocationInfo from './venue/locationInfo'\nimport FavoriteButton from './venue/favoriteButton'\nimport { useQuery } from '@apollo/client'\n\nconst pageStyle = {\n  sectionHeader: {\n    marginBottom: '15px'\n  },\n  columnWrapper: {\n    display: 'flex'\n  },\n  mainColumn: {\n    flexGrow: 3,\n    maxWidth: '800px'\n  },\n  sideColumm: {\n    flexGrow: 1,\n    marginTop: '-20px'\n  }\n}\n\nconst VenuePage = ({ match }) => {\n  const venueSlug = match.params.venueSlug\n  const [venue, setVenue] = useState(null)\n  const [venueTypeName, setVenueTypeName] = useState('')\n\n  const { loading, error, data } = useQuery(GET_VENUE_BY_SLUG, {\n    variables: { venueSlug }\n  })\n\n  useEffect(() => {\n    if (data) {\n      setVenue(data.venueBySlug)\n      setVenueTypeName(venuePrimaryTypeName(data.venueBySlug))\n    }\n  }, [data])\n\n  const onUpdateFavoritesStats = venueStats => {\n    setVenue({ ...venue, venueStats: { ...venueStats } })\n  }\n\n  if (loading) return null\n  if (error) return `Error! ${error}`\n\n  if (!venueSlug) {\n    return <div>Venue not found.</div>\n  } else {\n    return (\n      venue && (\n        <div>\n          <VenueHeader venue={venue} />\n          <div className=\"mainContainer\">\n            <div className=\"mainContent\">\n              <Typography variant=\"h5\" style={pageStyle.sectionHeader}>\n                {venue.name}\n              </Typography>\n              <div style={pageStyle.columnWrapper}>\n                <div style={pageStyle.mainColumn}>\n                  <div>\n                    Liked by{' '}\n                    <strong>\n                      <NumberFormat\n                        value={venue.venueStats.favorites}\n                        thousandSeparator={true}\n                        displayType={'text'}\n                      />{' '}\n                      {pluralize('person', venue.venueStats.favorites)}\n                    </strong>\n                    . &nbsp;\n                    {isUserLoggedIn() && (\n                      <FavoriteButton\n                        venueId={venue.id}\n                        venueSlug={venueSlug}\n                        favoriteByCurrentUser={\n                          venue.venueStats.favoriteByCurrentUser\n                        }\n                        onUpdateFavoritesStats={onUpdateFavoritesStats}\n                      />\n                    )}\n                  </div>\n                  <br />\n                  {venue.description && <span>{venue.description}</span>}\n                  This {venueTypeName} is located in {venue.city}, {venue.state}\n                  .\n                </div>\n                <div style={pageStyle.sideColumm}>\n                  <LocationInfo venue={venue} />\n                  <SimilarVenues venue={venue} />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    )\n  }\n}\n\nexport default VenuePage\n","import { createMuiTheme } from '@material-ui/core/styles'\nimport blue from '@material-ui/core/colors/blue'\n\nexport default createMuiTheme({\n  palette: {\n    primary: {\n      main: blue[500]\n    },\n    background: { default: '#efefef' }\n  },\n  typography: {\n    useNextVariants: true\n  }\n})\n","import React, { Component } from 'react'\nimport { withRouter } from 'react-router'\n\nimport { setUserInfo } from '../../utils/userUtils'\nimport Routes from '../../routes'\nimport { Mutation } from '@apollo/client/react/components'\nimport { SIGNUP_MUTATION, LOGIN_MUTATION } from '../../graphql/userMutations'\nimport { CURRENT_USER_QUERY } from '../../graphql/userQueries'\n\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\n\nimport { withStyles } from '@material-ui/core/styles'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\n\nconst styles = {\n  dialogMainContent: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column'\n  },\n  dialogMainError: {\n    textAlign: 'center'\n  }\n}\n\nclass LoginDialog extends Component {\n  state = {\n    login: this.props.login !== undefined ? this.props.login : true, // switch between Login and SignUp\n    email: '',\n    password: '',\n    firstName: '',\n    lastName: '',\n    errorMessage: null\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.open !== this.props.open) {\n      this.setState({ errorMessage: null })\n    }\n\n    if (prevProps.login !== this.props.login) {\n      this.setState({ login: this.props.login })\n    }\n  }\n\n  render() {\n    const {\n      login,\n      email,\n      password,\n      firstName,\n      lastName,\n      errorMessage\n    } = this.state\n    const { classes } = this.props\n    return (\n      <Dialog\n        open={this.props.open}\n        onClose={this.props.toggleDialog}\n        maxWidth=\"sm\"\n        fullWidth={true}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"login-dialog-title\">\n          {login ? 'Login' : 'Sign Up'}\n        </DialogTitle>\n        <DialogContent>\n          {errorMessage && (\n            <DialogContentText className={classes.dialogMainError}>\n              {errorMessage}\n            </DialogContentText>\n          )}\n          <div className={classes.dialogMainContent}>\n            {!login && (\n              <span>\n                <TextField\n                  id=\"firstName\"\n                  label=\"First name\"\n                  error={!!errorMessage}\n                  value={firstName}\n                  onChange={e => this.setState({ firstName: e.target.value })}\n                  margin=\"normal\"\n                  fullWidth\n                />\n                <TextField\n                  id=\"lastName\"\n                  label=\"Last name\"\n                  error={!!errorMessage}\n                  value={lastName}\n                  onChange={e => this.setState({ lastName: e.target.value })}\n                  margin=\"normal\"\n                  fullWidth\n                />\n              </span>\n            )}\n            <TextField\n              id=\"email\"\n              label=\"Email\"\n              error={!!errorMessage}\n              value={email}\n              onChange={e => this.setState({ email: e.target.value })}\n              margin=\"normal\"\n              fullWidth\n            />\n            <TextField\n              id=\"password\"\n              label=\"Password\"\n              error={!!errorMessage}\n              type=\"password\"\n              autoComplete=\"current-password\"\n              onChange={e => this.setState({ password: e.target.value })}\n              margin=\"normal\"\n              fullWidth\n            />\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={() => this.setState({ login: !login, errorMessage: null })}\n            color=\"primary\"\n            style={{ marginRight: 'auto' }}\n          >\n            {login ? 'need to create an account?' : 'already have an account?'}\n          </Button>\n\n          <Button onClick={this.props.toggleDialog} color=\"primary\">\n            Cancel\n          </Button>\n          <Mutation\n            mutation={login ? LOGIN_MUTATION : SIGNUP_MUTATION}\n            variables={{ email, password, firstName, lastName }}\n            update={(cache, { data }) =>\n              this._update(cache, login ? data.login : data.signup)\n            }\n            onCompleted={data => this._confirm(data)}\n            onError={error => this._error(error)}\n          >\n            {mutation => (\n              <Button color=\"primary\" onClick={mutation}>\n                {login ? 'login' : 'create account'}\n              </Button>\n            )}\n          </Mutation>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  _update = async (cache, info) => {\n    cache.writeQuery({\n      query: CURRENT_USER_QUERY,\n      data: {\n        currentUser: {\n          ...info.user,\n          token: info.token\n        }\n      }\n    })\n  }\n\n  _confirm = async data => {\n    this.state.error = null\n\n    const { token, user } = this.state.login ? data.login : data.signup\n    this._saveUserData(token, user)\n\n    document.location = Routes.dashboardPath('')\n  }\n\n  _saveUserData = (token, user) => {\n    setUserInfo(token, user)\n  }\n\n  _error = async ({ graphQLErrors }) => {\n    if (\n      this.state.login &&\n      graphQLErrors &&\n      graphQLErrors[0] &&\n      graphQLErrors[0].message\n    ) {\n      this.setState({ errorMessage: graphQLErrors[0].message })\n    } else if (\n      graphQLErrors &&\n      graphQLErrors[0] &&\n      graphQLErrors[0].extensions.exception.errors[0].message\n    ) {\n      this.setState({\n        errorMessage: graphQLErrors[0].extensions.exception.errors[0].message\n      })\n    }\n  }\n}\n\nexport default withRouter(withStyles(styles)(LoginDialog))\n","import React, { useEffect, useState } from 'react'\nimport Button from '@material-ui/core/Button'\nimport { withRouter } from 'react-router'\n// import { useQuery } from '@apollo/client'\nimport {\n  isUserLoggedIn,\n  withCurrentUser,\n  listenForOpenSignUpDialog\n} from '../../utils/userUtils'\nimport LoginDialog from './loginDialog'\nimport Typography from '@material-ui/core/Typography'\n// import { CURRENT_USER_QUERY } from '../../graphql/userQueries'\n\nconst LoginButton = ({ currentUser, className }) => {\n  const [dialogOpen, setDialogOpen] = useState(false)\n  const [login, setLogin] = useState(true)\n\n  useEffect(() => {\n    listenForOpenSignUpDialog(() => {\n      this.setState({ dialogOpen: true, login: false })\n      setDialogOpen(true)\n      setLogin(false)\n    })\n  })\n\n  const toggleDialog = () => {\n    setDialogOpen(!dialogOpen)\n    setLogin(true)\n  }\n\n  const renderUserInfo = currentUser => {\n    if (currentUser && currentUser.id) {\n      return `Welcome, ${currentUser.firstName}`\n    } else {\n      return ''\n    }\n  }\n\n  // const { data } = useQuery(CURRENT_USER_QUERY)\n  // console.log('data', data)\n\n  return isUserLoggedIn() ? (\n    <Typography variant=\"button\" color=\"inherit\" className={className}>\n      {renderUserInfo(currentUser)}\n    </Typography>\n  ) : (\n    <span>\n      <Button onClick={toggleDialog} className={className} color=\"inherit\">\n        Login\n      </Button>\n      <LoginDialog\n        open={dialogOpen}\n        login={login}\n        toggleDialog={toggleDialog}\n      />\n    </span>\n  )\n}\n\nexport default withCurrentUser(withRouter(LoginButton))\n","import React, { Component } from 'react'\nimport { Link as RouterLink } from 'react-router-dom'\n\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport IconButton from '@material-ui/core/IconButton'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport Menu from '@material-ui/core/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\n\nimport LoginButton from '../components/shared/loginButton'\nimport { logoutUser, isUserLoggedIn } from '../utils/userUtils'\nimport { withRouter } from 'react-router'\n\nimport Routes from '../routes'\n\nclass ButtonAppBar extends Component {\n  state = {\n    anchorEl: null\n  }\n\n  toggleMenu = event => {\n    this.state.anchorEl\n      ? this.setState({ anchorEl: null })\n      : this.setState({ anchorEl: event.currentTarget })\n  }\n\n  render() {\n    const { classes } = this.props\n\n    return (\n      <div className={classes.root}>\n        <AppBar\n          position=\"fixed\"\n          style={{ background: 'transparent', boxShadow: 'none' }}\n        >\n          <Toolbar variant=\"dense\" className={classes.container}>\n            <Typography\n              className={classes.logoText}\n              variant=\"button\"\n              color=\"inherit\"\n            >\n              KidTrip\n            </Typography>\n            <Typography\n              variant=\"h6\"\n              color=\"inherit\"\n              className={classes.grow}\n            ></Typography>\n            <LoginButton className={classes.loginButton} />\n\n            {isUserLoggedIn() && (\n              <span className={classes.menuWrapper}>\n                <IconButton\n                  onClick={this.toggleMenu}\n                  className={classes.menuButton}\n                  color=\"inherit\"\n                  aria-label=\"Menu\"\n                >\n                  <MenuIcon />\n                </IconButton>\n                <Menu\n                  id=\"simple-menu\"\n                  anchorEl={this.state.anchorEl}\n                  open={Boolean(this.state.anchorEl)}\n                  onClose={this.toggleMenu}\n                >\n                  <MenuItem\n                    component={RouterLink}\n                    to={Routes.home}\n                    onClick={this.toggleMenu}\n                  >\n                    Home\n                  </MenuItem>\n                  <MenuItem\n                    component={RouterLink}\n                    to={Routes.dashboardPath('')}\n                    onClick={this.toggleMenu}\n                  >\n                    Dashboard\n                  </MenuItem>\n                  <MenuItem onClick={this.toggleMenu}>My account</MenuItem>\n                  <MenuItem\n                    onClick={() => {\n                      logoutUser()\n                      this.props.history.push(`/`)\n                    }}\n                  >\n                    Logout\n                  </MenuItem>\n                </Menu>\n              </span>\n            )}\n          </Toolbar>\n        </AppBar>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(ButtonAppBar)\n","import React from 'react'\nimport { isHomepage } from '../utils/routeUtils'\nimport { withStyles } from '@material-ui/core/styles'\nimport { withRouter } from 'react-router'\nimport blueGrey from '@material-ui/core/colors/blueGrey'\n\nimport AppBar from './appBar'\n\nconst styles = {\n  root: {\n    flexGrow: 1\n  },\n  grow: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20\n  },\n  menuWrapper: {\n    marginLeft: 15\n  }\n}\n\nconst nonHomepageStyles = {\n  ...styles,\n  container: {\n    borderBottom: '1px solid',\n    borderBottomColor: blueGrey[100],\n    backgroundColor: 'white'\n  },\n  grow: {\n    ...styles.grow,\n    color: blueGrey[500]\n  },\n  menuButton: {\n    ...styles.menuButton,\n    color: blueGrey[500]\n  },\n  loginButton: {\n    color: blueGrey[500]\n  },\n  logoText: {\n    color: blueGrey[500]\n  }\n}\n\nconst AppBarContainer = props => {\n  const currentStyles = isHomepage(props.location) ? styles : nonHomepageStyles\n  const AppBarWithStyles = withStyles(currentStyles)(AppBar)\n  return <AppBarWithStyles />\n}\n\nexport default withRouter(AppBarContainer)\n","import React from 'react'\nimport '../shared/sidebarModule.css'\nimport FeedItem from '../dashboard/feedItem'\n\nconst SideVenueWidget = ({ title, venues }) => {\n  return (\n    <div className=\"sidebar-module\">\n      <h3>{title}</h3>\n      <div className=\"sidebar-module-body\">\n        {venues.map(venue => (\n          <FeedItem key={venue.id} venue={venue}></FeedItem>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default SideVenueWidget\n","import React, { Fragment, useEffect, useState } from 'react'\nimport withPageTemplate from './shared/withPageTemplate'\nimport { useQuery } from '@apollo/client'\nimport { GET_USER_PROFILE_BY_PUBLIC_ID } from '../graphql/userQueries'\nimport { headerStyles } from '../utils/styleUtils'\nimport SideVenueWidget from './userProfile/sideVenueWidget'\n\nimport './userProfile/userProfile.css'\n\nconst UserProfilePage = ({ match }) => {\n  const publicId = match.params.userId\n  const [userProfile, setUserProfile] = useState(null)\n  // const { loading, error, data } = useQuery(GET_USER_PROFILE_BY_PUBLIC_ID, {\n  const { data } = useQuery(GET_USER_PROFILE_BY_PUBLIC_ID, {\n    variables: { publicId }\n  })\n\n  useEffect(() => {\n    if (data) {\n      setUserProfile(data.userProfile)\n    }\n  }, [data])\n\n  if (!publicId) {\n    return <div>User profile not found.</div>\n  } else {\n    if (userProfile) {\n      const headerStyle = headerStyles(\n        userProfile.config.headerImageUrl,\n        '300px'\n      )\n\n      return (\n        <div>\n          <div style={{ ...headerStyle.container, borderRadius: '8px' }}>\n            <div className=\"headerUserInfo\">\n              <strong>\n                {userProfile.user.firstName}\n                {userProfile.user.lastName &&\n                  userProfile.user.lastName.length && (\n                    <Fragment>&nbsp;{userProfile.user.lastName[0]}</Fragment>\n                  )}\n                .\n              </strong>\n              &nbsp;&#183;&nbsp;<span>{userProfile.stats.created} added</span>\n              &nbsp;&#183;&nbsp;<span>{userProfile.stats.favorited} liked</span>\n            </div>\n          </div>\n          <div className=\"contentContainer\">\n            <div className=\"contentContainerMain\">More to come...</div>\n            <div className=\"contentContainerSide\">\n              {userProfile.recentAddedVenues &&\n                userProfile.recentAddedVenues.length && (\n                  <SideVenueWidget\n                    title=\"Recently added\"\n                    venues={userProfile.recentAddedVenues}\n                  />\n                )}\n              {userProfile.recentFavoriteVenues &&\n                userProfile.recentFavoriteVenues.length && (\n                  <SideVenueWidget\n                    title=\"Recently liked\"\n                    venues={userProfile.recentFavoriteVenues}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      )\n    } else return false\n  }\n}\n\nexport default withPageTemplate(UserProfilePage)\n","import React, { Component } from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport { withRouter } from 'react-router'\nimport Routes from './routes'\nimport { isHomepage } from './utils/routeUtils'\n\nimport HomePage from './components/homePage'\nimport DashboardPage from './components/dashboardPage'\nimport VenuePage from './components/venuePage'\n\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { MuiThemeProvider, withStyles } from '@material-ui/core/styles'\nimport theme from './theme'\nimport AppBar from './layout/appBarContainer'\nimport UserProfilePage from './components/userProfilePage'\n\nconst styles = {\n  '@global': {\n    body: {\n      fontFamily: 'Roboto, Helvetica, Arial, sans-serif',\n      fontWeight: 400\n    },\n    '.mainContainer': {\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    '.mainContent': {\n      maxWidth: '1200px',\n      flexGrow: '1',\n      margin: '25px',\n      backgroundColor: '#ffffff',\n      padding: '25px',\n      borderRadius: '8px'\n    }\n  },\n  appBarSpacer: {\n    height: '49px'\n  }\n}\n\nclass App extends Component {\n  render() {\n    const { classes, location } = this.props\n\n    return (\n      <MuiThemeProvider theme={theme}>\n        <div>\n          <CssBaseline />\n          <AppBar />\n          {!isHomepage(location) && (\n            <div className={classes.appBarSpacer}></div>\n          )}\n          <Switch>\n            <Route exact path={Routes.home} component={HomePage} />\n            <Route path={Routes.dashboard} component={DashboardPage} />\n            <Route path={Routes.venue} component={VenuePage} />\n            <Route path={Routes.userProfile} component={UserProfilePage} />\n          </Switch>\n        </div>\n      </MuiThemeProvider>\n    )\n  }\n}\n\nexport default withRouter(withStyles(styles)(App))\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {\n  ApolloClient,\n  ApolloProvider,\n  ApolloLink,\n  HttpLink\n} from '@apollo/client'\nimport { InMemoryCache } from '@apollo/client/cache'\nimport { onError } from '@apollo/client/link/error'\n\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { BrowserRouter } from 'react-router-dom'\nimport 'typeface-roboto'\nimport { getUserInfoFromStorage } from './utils/userUtils'\nimport { AUTH_TOKEN } from './constants'\nimport { CURRENT_USER_QUERY } from './graphql/userQueries'\n\nconst SERVER_HOST = process.env.REACT_APP_SERVER_HOST\n\nconst token = localStorage.getItem(AUTH_TOKEN)\nconst httpLink = new HttpLink({\n  uri: SERVER_HOST, // || 'http://localhost:4000',\n  credentials: 'same-origin',\n  headers: {\n    authorization: token ? `Bearer ${token}` : ''\n  }\n})\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    onError(({ graphQLErrors, networkError }) => {\n      if (graphQLErrors)\n        graphQLErrors.map(({ message, locations, path }) =>\n          console.log(\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n          )\n        )\n      if (networkError) console.log(`[Network error]: ${networkError}`)\n    }),\n    httpLink\n  ]),\n  cache: new InMemoryCache(),\n  resolvers: {}\n})\n\nclient.writeQuery({\n  query: CURRENT_USER_QUERY,\n  data: {\n    currentUser: { ...getUserInfoFromStorage() }\n  }\n})\n\nReactDOM.render(\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </BrowserRouter>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}